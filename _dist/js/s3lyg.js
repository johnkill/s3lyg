(function(){
var nsMapData = IXW.ns("MapData");

function getGeoData(topo, bbox, scaleRate){
	var scale = topo.transform.scale;
	return {
		root: topo,
		center: [(bbox[0] + bbox[2]) / 2, (bbox[1] + bbox[3]) / 2],
		scale: scaleRate * Math.max(1 / scale[0], 1 / scale[1])
	};
}
var chinaTopojson = {"type":"Topology","transform":{"scale":[0.0023415374016230355,0.0018039985796827979],"translate":[73.60225630700012,18.19318268400005]},"objects":{"collection":{"type":"GeometryCollection","geometries":[{"arcs":[[0,1,2,3,4,5,6]],"type":"Polygon","properties":{"id":1,"name":"甘肃"}},{"arcs":[[7,8,9,-4]],"type":"Polygon","properties":{"id":2,"name":"青海"}},{"arcs":[[10,11,12,13,14]],"type":"Polygon","properties":{"id":3,"name":"广西"}},{"arcs":[[15,-14,16,17,18]],"type":"Polygon","properties":{"id":4,"name":"贵州"}},{"arcs":[[19,20,-19,21,22]],"type":"Polygon","properties":{"id":5,"name":"重庆"}},{"arcs":[[23,24,25,26]],"type":"Polygon","properties":{"id":6,"name":"北京"}},{"arcs":[[[27]],[[28,29,30,31]]],"type":"MultiPolygon","properties":{"id":7,"name":"福建"}},{"arcs":[[32,33,34,35,36,37]],"type":"Polygon","properties":{"id":8,"name":"安徽"}},{"arcs":[[[38]],[[39]],[[40]],[[41,-30,42,43,44,-11,45]]],"type":"MultiPolygon","properties":{"id":9,"name":"广东"}},{"arcs":[[-9,46,47,48,49]],"type":"Polygon","properties":{"id":10,"name":"西藏"}},{"arcs":[[-5,-10,-50,50]],"type":"Polygon","properties":{"id":11,"name":"新疆"}},{"arcs":[[51]],"type":"Polygon","properties":{"id":12,"name":"海南"}},{"arcs":[[52,-1,53]],"type":"Polygon","properties":{"id":13,"name":"宁夏"}},{"arcs":[[54,55,56,-23,57,-2,-53,58]],"type":"Polygon","properties":{"id":14,"name":"陕西"}},{"arcs":[[59,-55,60,61]],"type":"Polygon","properties":{"id":15,"name":"山西"}},{"arcs":[[-35,62,63,-20,-57,64]],"type":"Polygon","properties":{"id":16,"name":"湖北"}},{"arcs":[[65,-46,-15,-16,-21,-64]],"type":"Polygon","properties":{"id":17,"name":"湖南"}},{"arcs":[[-58,-22,-18,66,-47,-8,-3]],"type":"Polygon","properties":{"id":18,"name":"四川"}},{"arcs":[[-17,-13,67,-48,-67]],"type":"Polygon","properties":{"id":19,"name":"云南"}},{"arcs":[[[68]],[[-25,69]],[[70,71,72,-27,73,74,75,76,-62,77]]],"type":"MultiPolygon","properties":{"id":20,"name":"河北"}},{"arcs":[[78,-36,-65,-56,-60,-77]],"type":"Polygon","properties":{"id":21,"name":"河南"}},{"arcs":[[[79]],[[80,-71,81,82]]],"type":"MultiPolygon","properties":{"id":22,"name":"辽宁"}},{"arcs":[[83,-37,-79,-76,84]],"type":"Polygon","properties":{"id":23,"name":"山东"}},{"arcs":[[85,-74,-26,-70,-24,-73]],"type":"Polygon","properties":{"id":24,"name":"天津"}},{"arcs":[[86,-31,-42,-66,-63,-34]],"type":"Polygon","properties":{"id":25,"name":"江西"}},{"arcs":[[87,88,-38,-84,89]],"type":"Polygon","properties":{"id":26,"name":"江苏"}},{"arcs":[[[90,91,-88]],[[92]]],"type":"MultiPolygon","properties":{"id":27,"name":"上海"}},{"arcs":[[[93]],[[94]],[[-92,95,-32,-87,-33,-89]]],"type":"MultiPolygon","properties":{"id":28,"name":"浙江"}},{"arcs":[[96,-83,97,98]],"type":"Polygon","properties":{"id":29,"name":"吉林"}},{"arcs":[[99,-98,-82,-78,-61,-59,-54,-7,100]],"type":"Polygon","properties":{"id":30,"name":"内蒙古"}},{"arcs":[[-99,-100,101]],"type":"Polygon","properties":{"id":31,"name":"黑龙江"}},{"arcs":[[[102]],[[103,-44]]],"type":"MultiPolygon","properties":{"id":32,"name":"香港"}},{"arcs":[[[104]],[[105]]],"type":"MultiPolygon","properties":{"id":33,"name":"澳门"}},{"arcs":[[106]],"type":"Polygon","properties":{"id":34,"name":"台湾"}}]}},"arcs":[[[13135,10647],[45,22],[96,-16],[33,-89],[38,-18],[29,-67],[110,-69],[60,-106],[-43,-49],[21,-79],[53,-92],[22,-72],[-3,-82],[-37,-27],[-14,-69],[48,-98],[109,-53],[61,-93],[46,17],[55,-20],[20,-35],[42,-17],[44,-67],[27,-7],[38,40],[13,122],[-29,81],[18,16],[127,-12],[62,46],[-30,51],[31,14],[13,94],[-56,75],[-30,-3],[-60,40],[-46,-5],[0,93],[-24,43],[23,25],[4,81],[42,11],[20,60],[-31,54],[25,37],[4,102],[63,4],[61,-46],[108,6],[42,-27]],[[14385,10463],[6,-89],[86,-9],[21,-29],[62,-8],[82,-39],[66,-87],[134,-29],[37,-47],[70,-16],[42,-40],[-23,-74],[21,-56],[-10,-66],[-78,-69],[7,-100],[40,-85],[6,-86],[-53,-67],[-93,-5],[-52,15],[-75,-37],[-24,24],[-77,29],[-30,-50],[68,-139],[-52,-15],[-60,8],[-31,-22],[-75,9],[-47,-28],[-68,82],[-58,28],[-150,-5],[-31,-28],[25,-93],[-25,-67],[-74,-88],[21,-35],[56,0],[49,-34],[26,-41],[-8,-72],[-43,15],[14,-80],[-31,-17],[-36,-91],[21,-41],[1,-93],[33,-56],[-27,-31],[-44,42],[-95,-32],[-42,31],[-102,-66],[-37,-113],[71,-34],[-1,-112],[-10,-29],[-106,-52],[-60,12]],[[13622,8156],[-29,3],[-19,-49],[21,-28],[-71,-73],[-52,-18],[-49,16],[-57,-14],[-25,15],[-83,10],[-38,17],[-65,67],[-50,21],[14,59],[36,61],[-33,43],[-20,73],[5,50],[-50,70],[-8,75],[-27,24],[-149,5],[-95,21],[15,51],[-88,-28],[-71,36],[-18,78],[4,81],[-14,34],[-51,25],[-30,45],[-63,-12],[-79,-60],[9,-46],[-76,-13],[-52,-40],[-63,-25],[73,-120],[6,-64],[54,-39],[0,-41],[-87,-49],[-63,-51],[-14,-35],[-40,-2],[-60,-53],[-14,81],[39,76],[-17,78],[-45,-9]],[[12033,8502],[-70,-10],[-16,65],[-35,41],[-41,-33],[-102,11],[-13,103],[-77,44],[-67,125],[10,77],[51,51],[43,-26],[94,-21],[29,-23],[123,-38],[15,-31],[57,-37],[35,40],[64,21],[28,49],[58,47],[-27,80],[-93,53],[-8,39],[-51,-17],[-17,40],[72,47],[-4,31],[41,54],[110,63],[46,82],[-24,40],[-13,73],[59,16],[46,55],[72,-6],[8,53],[-18,76],[9,46],[59,12],[59,-16],[10,88],[-29,52],[46,73],[-62,51],[-33,9],[-20,96],[-31,61],[-37,27],[27,80],[-92,85],[16,74],[23,42],[-53,63],[-77,57],[-45,14],[-46,41],[15,38],[-56,101],[-73,-114],[-51,48],[-151,104],[-104,91],[-177,79],[-35,81],[-84,31],[-92,99],[-25,-51],[31,-51],[-33,-13],[-119,48],[-103,83],[-26,48],[-170,160],[-2,37],[-57,14],[-77,47],[-76,-66],[-68,5],[-51,37],[-26,-51],[-83,-72],[-302,193],[-96,29],[-47,-4],[-28,-51],[13,-59],[-5,-140],[-16,-58],[12,-40],[-11,-116],[-43,-1],[-143,63],[-3,44],[-80,43],[-111,29],[-20,40],[-50,18],[-72,50],[-67,78],[-45,18],[-66,75],[-106,-20],[-142,50],[-40,32],[-65,13],[-155,2],[-89,-20],[-79,12],[-94,-20],[-97,-46],[-58,6],[-87,-26]],[[8257,11618],[5,167],[-75,198],[2,53],[61,117],[3,169],[47,38],[106,-12],[125,66],[78,130],[107,156],[243,267],[204,112],[185,38],[120,-15],[39,14],[74,78],[-8,80],[11,200],[20,48],[118,75]],[[9722,13597],[352,36]],[[10074,13633],[280,-647],[-85,-91],[26,-59],[103,-127],[161,-147],[-39,-174],[120,-4],[55,19],[77,88],[142,61],[144,3],[72,33],[148,-3],[71,-89],[12,-66],[-28,-55],[-53,-64],[-49,-109],[-117,-76],[-83,-105],[109,-2],[152,-82],[62,-18],[42,-38],[9,-42],[63,-31],[38,-48],[105,0],[18,-16],[9,-117],[15,-35],[68,-58],[57,11],[29,-83],[71,-67],[71,-34],[107,1],[81,92],[1,20],[-85,95],[243,96],[85,-33],[159,-32],[136,96],[77,36],[122,37],[117,9],[16,-74],[70,-120],[-23,-73],[-55,-47],[-27,-64],[-79,-93],[-138,-86],[22,-164],[-57,-21],[-1,-57],[22,-87],[103,-37],[79,-83],[104,-91],[66,-40],[41,6]],[[12033,8502],[-37,-61],[-11,-56],[26,-29],[-35,-77],[-85,60],[-96,-37],[-24,-23],[-14,-105],[43,-45],[-26,-94],[-115,-32],[-88,31],[-40,-130],[-30,-27],[-25,45],[37,44],[-26,58],[-43,50],[-61,-18],[-14,-50],[-44,19],[16,62],[-47,85],[-88,12],[-31,-20],[-30,-98],[-81,51],[-94,28],[-27,62],[-53,41],[-107,57],[-33,71],[-16,103],[-44,66],[5,38],[-80,90],[-67,4],[-38,52],[-76,11],[-92,-53],[-31,0],[-21,78],[-37,-41],[-97,-34],[3,-143],[37,-28],[27,-60],[79,-26],[-47,-43],[-49,-74],[2,-83],[-61,-82],[29,-109],[122,-87]],[[10298,7955],[-36,-55],[-29,22],[-86,9],[-15,-43],[28,-21],[-14,-69],[-45,-31],[0,-72],[-56,-36],[-45,7],[-113,-27],[0,-75],[18,-68],[-133,21],[-88,86],[-41,-21],[-14,-51],[27,-24],[1,-72],[-51,52],[-105,8],[-110,26],[-40,-11],[-39,39],[-22,79],[30,78],[-18,42],[-53,41],[-84,9],[-47,42],[-6,51],[-78,59],[-14,32],[-60,44],[-113,-73],[-60,-10],[-28,-24],[-100,9],[-61,43],[-59,-5],[-37,-26],[-70,34],[-54,45],[-80,2],[-11,40],[-67,-4],[-52,18],[-33,-11],[-79,16],[-104,-14],[-11,69],[-47,9],[-47,-20],[-70,66],[-39,8],[-76,54],[-71,106],[-7,37],[-73,0],[-26,-46],[-76,-9],[-63,-54],[-61,8],[-96,70],[-48,4],[-50,62],[-1,55],[-27,43],[-71,29],[-41,107],[-58,48],[-45,102],[64,58],[23,103],[-19,13],[-2,81],[-29,103],[43,59],[-16,45],[-87,8],[-5,73],[-50,77],[13,72],[105,56],[-17,36],[10,74],[32,103],[-89,7],[-41,22],[-21,60],[34,36],[69,16]],[[6865,9916],[81,-9],[45,22],[18,82],[65,-69],[195,-10],[88,-55],[37,1],[84,34],[10,37],[-32,96],[-23,105],[-86,30],[-50,78],[10,68],[41,49],[106,20],[99,38],[12,58],[-35,42],[-68,163],[-50,17],[-53,49],[-170,95],[-11,38],[13,82],[-105,183],[-19,59],[69,19],[71,37],[68,50],[7,28],[153,14],[121,25],[84,40],[59,5],[211,64],[89,60],[258,57]],[[16397,3627],[-27,-21],[0,-54],[31,-27],[-6,-48],[24,-47],[-31,-58],[-45,-25],[12,-133],[-39,-45],[-6,-34],[-58,-4],[-24,-102],[-55,-25],[-1,-30],[-33,-70],[-13,-88],[3,-74],[18,-48],[-26,-80],[-72,-89],[-49,-4],[-18,-57],[-115,-32],[-48,-220],[-75,-18],[-57,22],[9,-50],[0,-117],[-59,-8],[-32,12],[-75,-17],[-21,-99],[-72,-62]],[[15437,1875],[-42,-31],[-33,34],[-18,-50],[-40,-20],[-52,2],[-43,-23],[-70,11],[39,41],[-3,51],[-29,19],[-41,-17],[-30,33],[-64,-9],[-77,90],[-7,51],[-45,-21],[24,-97],[-26,-26],[-52,36],[-30,-63],[-50,-8],[-62,-53],[-57,64],[-48,31],[-56,-28],[-113,-4],[-32,66],[-43,-2],[-46,45],[-19,53],[-67,43],[-60,21],[-22,47],[-4,73],[-19,55],[-27,5],[-12,53],[18,82],[48,2],[23,65],[-2,58],[-27,37],[-77,32],[-73,-40],[-35,6],[-13,46],[-87,16],[-62,-39],[-70,77],[-59,9],[-13,57]],[[13632,2755],[139,197],[58,-27],[62,39],[10,117],[18,65],[-16,58],[-79,63],[-42,-34],[-36,-3],[-110,59],[-36,-49],[-54,44],[-29,-18],[-35,46],[2,79],[-49,67],[-43,-8],[-89,28],[-10,-57],[-26,-14],[-29,35],[-42,97],[-3,67],[20,24]],[[13213,3630],[80,-61],[53,41],[10,27],[58,24],[38,87],[45,27],[36,-39],[39,13],[27,-18],[27,-59],[71,-15],[48,-41],[55,7],[37,-45],[74,74],[10,53],[-18,46],[64,12],[120,68],[34,38],[93,13],[47,33],[8,54],[-17,48],[21,32],[94,34],[66,-95],[43,-96],[61,29],[58,-63],[36,-4],[45,35],[43,2],[26,31],[2,65],[69,85],[47,-13],[70,-55],[54,103],[34,-44],[71,14],[36,26],[26,117],[27,-31],[65,-4],[42,142],[24,22]],[[15312,4349],[63,8],[29,-38],[2,-53],[41,11],[4,64],[24,11],[32,76],[64,-17],[-12,-63],[44,8],[47,-41],[40,75],[61,33],[23,29],[17,70],[47,-10],[16,-32],[66,0],[24,60],[80,-43],[55,-14],[2,-39],[-23,-155],[23,-34],[65,21],[1,-58],[-37,-40],[-4,-126],[-26,-58],[-38,-19],[-22,-70],[-51,-48],[-17,-70],[22,-50],[31,5],[20,56],[64,57],[65,-23],[15,-48],[-14,-42],[19,-84],[-20,-62],[38,-21],[64,76],[56,-11],[55,8],[30,-21]],[[15228,5717],[2,-102],[39,-32],[-24,-94],[27,-36],[-22,-33],[7,-90],[37,-39],[14,-49],[-12,-50],[-91,-64],[-81,-101],[-49,-41],[-47,-58],[36,-36],[32,5],[62,59],[26,-30],[32,40],[88,-12],[26,-38],[4,-47],[-27,-42],[26,-42],[-46,-39],[-44,-15],[35,-45],[11,-61],[-37,-62],[-8,-62],[44,-24],[24,-128]],[[13213,3630],[2,40],[69,113],[-8,46],[13,61],[-21,48],[-44,46],[-6,58],[-51,12],[-5,40],[-49,48],[49,106],[-12,51],[45,46],[20,132],[55,61],[-49,114],[-86,35],[-60,-12],[-28,14],[-56,-76],[-82,18],[-30,45],[7,57],[-25,37],[26,45],[0,42],[-33,54],[-2,55],[92,132],[30,5],[82,-71],[73,94],[42,-52],[65,-18],[81,10],[37,-12],[90,56],[49,-7],[43,179]],[[13536,5282],[27,21],[70,8],[52,-53],[98,37],[70,6],[27,18],[62,-7],[42,33],[-20,91],[-36,31],[-7,38],[-38,28],[-43,-19],[-44,6],[-25,65],[-77,28],[-20,91],[27,56],[89,14],[39,80],[88,-94],[34,-15],[48,9]],[[13999,5754],[46,-18],[31,125],[28,-72],[-28,-70],[80,-4],[6,49],[28,10],[3,67],[23,39],[36,2],[24,46],[56,-3],[58,-41],[60,38],[27,65],[-33,46],[3,59],[28,35],[26,-33],[97,-27],[2,-54],[37,-31],[77,44],[98,7],[35,-166],[-16,-49],[108,-49],[0,-125],[63,56],[23,-28],[-24,-102],[92,-23],[65,3],[26,128],[44,39]],[[15371,7508],[56,-56],[3,-42],[84,-23],[77,-67],[28,-116],[-29,-37],[9,-120],[-26,-43],[-30,-1],[-54,34],[-52,-29],[-46,-65],[-105,-75],[-63,8],[-29,-17],[-92,23],[-41,-32],[-67,-15],[-18,28],[-41,-42],[-60,-6],[-22,-49],[64,-46],[3,-239],[-59,-30],[20,-53],[28,-7],[43,75],[35,-89],[76,-32],[0,-76],[20,-85],[40,-23],[27,-52],[56,-61]],[[15206,6048],[29,-30],[-13,-66],[1,-80],[14,-32],[-29,-55],[31,-31],[-11,-37]],[[13999,5754],[-36,55],[-16,109],[-107,58],[-56,-30],[-57,42],[-19,126],[-24,26],[-95,35],[-7,54],[-39,22],[-10,64],[52,65],[60,25],[2,31],[65,35],[13,92],[-78,64],[65,70],[35,82],[142,-44],[49,-68],[62,24],[63,41],[37,-38],[42,-116],[23,-13],[112,12],[84,100],[61,145],[45,61],[-9,84],[22,33],[98,34],[48,-40],[34,35],[1,42],[32,50],[11,101],[69,61],[13,75],[78,55],[47,79],[-7,46],[-91,72],[-8,28],[32,56],[32,15],[-13,47],[56,7]],[[14912,7763],[115,-84],[114,-58],[57,-56],[27,-53],[36,-22],[110,18]],[[18686,12231],[-19,-82],[-31,-10]],[[18636,12139],[-107,-32],[-68,1],[-36,-43],[16,-38],[60,-64],[-20,-49]],[[18481,11914],[-35,-46]],[[18446,11868],[-81,5],[-75,-50],[-18,-44],[-59,35],[-16,37],[-114,2],[-80,-37],[-59,52],[-66,22],[-12,59],[32,50],[-6,47],[-30,21],[64,74],[104,31],[53,79],[-92,136],[62,39],[52,-8],[57,35],[33,51],[36,-6],[72,29],[-9,60],[92,73],[9,-51],[101,-106],[63,-40],[60,8],[98,-12],[-7,-40],[-72,-15],[-25,-40],[22,-26],[6,-63],[45,-44]],[[19721,4115],[17,-39],[-11,-46],[-42,26],[36,59]],[[19994,4996],[-61,61],[-22,-26],[84,-64],[-27,-31],[-32,8],[-20,-103],[-47,1],[-43,-50],[44,-23],[-21,-83],[-41,4],[40,73],[-56,6],[-38,-79],[-18,80],[-35,-19],[-63,17],[-14,-25],[1,-74],[51,2],[47,-23],[15,-69],[-71,-14],[12,-62],[28,6],[34,55],[23,-35],[-41,-37],[-47,-9],[-92,-165],[-113,58],[22,-67],[43,-15],[40,13],[54,48],[57,-43],[-36,-44],[-10,-111],[-24,7],[-33,-40],[43,-38],[37,-95],[-70,-12],[10,57],[-60,26],[-26,46],[-28,-68],[-55,-41],[48,-50],[28,5],[24,-46],[-24,-30],[-48,-7],[-14,25],[-66,0],[-47,-100],[43,-16],[8,-33],[-120,-61],[13,-68],[-75,-84],[-64,31],[-30,-23],[-94,21],[-37,-25],[-21,-71],[56,-103],[-59,-38],[-19,11],[-21,-103],[-85,-41],[-48,-35],[-20,16],[-31,-72],[-73,-15],[-13,-59],[-38,-22]],[[18608,3006],[-59,68],[-47,188],[18,59],[-36,116],[-58,88],[-1,66],[-60,-9],[-32,-22],[-67,125],[-110,3],[-34,26],[-63,13]],[[18059,3727],[0,46],[-19,108],[28,24],[30,63],[21,158],[41,71],[5,56],[80,50],[31,59],[10,50],[-9,75],[44,66],[40,-6],[10,53],[-33,39],[-16,71],[18,99],[53,66],[108,18],[50,50],[49,92],[-23,39],[10,46],[-5,76],[48,87],[26,27],[-1,47],[111,61],[26,-56],[60,-29],[34,68],[101,24],[30,34],[101,32],[-8,67],[42,38]],[[19152,5596],[22,-14],[101,35],[26,-63],[-13,-19],[-8,-114],[31,-35],[30,-104],[14,-95],[35,-39],[77,-33],[34,2],[54,49],[33,7],[19,62],[44,16],[30,-86],[3,-55],[33,-53],[126,15],[35,32],[84,-12],[26,-46],[6,-50]],[[19657,7173],[-23,-159],[-32,-43],[-25,-72],[-39,20],[-47,-69],[34,-18],[18,-63],[-65,-50],[-65,-1],[-53,22],[-23,-15],[12,-57],[-24,-35],[18,-98],[-32,-57],[-33,-28],[-8,-55],[-71,-58],[-79,-96],[-84,-24]],[[19036,6217],[-27,61],[-54,30],[-37,-13],[-82,3],[-25,28],[-52,9],[-53,84],[1,32],[-56,-1],[-21,43],[-43,2],[-24,-39],[5,-72],[-53,-31],[-29,-52],[-60,-8],[-42,45],[11,45],[53,27],[38,91],[-41,56],[-60,16],[-68,-92],[-44,-5],[-65,-52],[-38,4]],[[18170,6428],[-30,99],[-16,141],[-55,52],[-15,41],[30,54],[-76,111],[3,37],[37,17],[-2,42],[76,71],[-38,25],[-30,53],[-46,8],[-43,41],[-50,-20],[-76,131]],[[17839,7331],[7,52],[61,124],[56,27],[102,6],[11,127],[-17,205],[-42,42],[-41,12],[-20,-49],[-35,0],[-85,87],[-71,17],[-6,149],[-111,55],[-17,69],[36,22],[74,-22],[46,21],[40,72],[-12,68],[13,44],[41,53],[82,24],[-26,88],[24,49],[-30,33],[40,83],[34,9],[46,-32],[51,-4],[4,-53],[47,-70],[44,-33],[101,40],[11,30],[84,60],[-42,93],[13,40],[-9,52],[-65,-6],[-104,95],[-3,66]],[[18171,9076],[50,6],[47,35]],[[18268,9117],[22,0],[84,-86],[61,-18],[14,-29],[63,-6],[9,-63],[27,-67],[54,-35],[69,-7],[30,-27],[48,11],[63,-38],[40,-55],[3,-88],[159,23],[22,-40],[-104,-254],[63,-47],[59,17],[9,-143],[26,-81],[42,-25],[138,0],[11,59],[47,74],[58,-5],[84,-139],[4,-65],[-51,-82],[-80,83],[-60,9],[-85,-21],[49,-67],[7,-63],[-14,-57],[-58,-21],[-7,-34],[-49,-47],[-14,-59],[55,-49],[-1,-38],[88,-49],[-1,-30],[76,-11],[9,-58],[-23,-70],[-32,-21],[27,-73],[111,7],[38,26],[65,-11],[20,-41],[114,-33]],[[15711,1609],[58,-8],[-2,-60],[-118,30],[62,38]],[[16767,1982],[-55,-78],[-10,41],[29,39],[36,-2]],[[17100,2444],[-65,57],[15,22],[47,-49],[3,-30]],[[17222,4022],[36,-8],[6,-92],[38,22],[70,-9],[64,52],[60,12],[5,-26],[54,-39],[-11,-70],[20,-25],[-77,-36],[-58,-41],[-13,-53],[-35,-70],[-46,-35],[41,-55],[58,-53],[31,31],[104,38],[52,-20],[35,45],[44,21],[39,-13],[43,34],[77,22],[77,-98],[45,-35],[40,15],[-21,97],[16,63],[43,31]],[[18608,3006],[-64,24],[-45,-12],[-27,-63],[5,-41],[-50,-69],[-8,-38],[-84,-82],[12,-50],[-29,-44],[-49,-6],[-35,19],[-54,-55],[-41,2],[-50,-35],[-63,2],[-67,48],[-30,-8],[-26,-77],[-64,-26],[-18,52],[-36,26],[-77,-22],[-86,-107],[-52,4],[4,78],[-15,23],[-66,-33],[-17,-25],[6,-66],[34,-30],[-43,-34],[-16,52],[-35,37],[-71,-32]],[[17351,2418],[-63,-14]],[[17288,2404],[-56,-3],[-26,-40],[-50,122],[-13,49],[-34,21],[-34,100],[-34,6],[-58,-61],[54,-58],[-24,-20],[68,-91],[-22,-76],[18,-111],[-45,-46],[-77,16],[-31,-78],[-31,-10],[-20,41],[-36,25],[1,-101],[-31,-48],[-33,0],[-23,50],[-77,-64],[-16,-41],[-70,29],[-34,-53],[-51,-14],[-31,59],[-77,-28],[-129,-88],[-25,-41],[-82,2],[-59,-19],[-40,18],[-144,-82],[-34,11],[-49,-52],[-17,-45],[-66,-7],[-26,89],[-25,-50],[14,-69],[-54,-41],[-48,-57],[0,-76],[98,-13],[-20,-55],[30,-78],[30,-10],[24,-49],[-58,-99],[-51,-26],[-65,-3],[-43,29],[-5,65],[-83,55],[-8,55],[-24,8],[12,106],[-36,8],[-12,51],[20,72],[-16,36],[44,51],[14,78],[42,19],[5,55],[-49,-9],[-23,57]],[[16397,3627],[30,33],[33,-1],[9,65],[-19,21],[40,139],[104,-20],[88,-28],[21,-63],[41,-31],[77,11],[-13,51],[4,69],[-34,34],[12,46],[74,50],[54,50],[88,-67],[43,1],[25,-33],[56,19],[49,-2],[43,51]],[[10298,7955],[128,-44],[81,-60],[7,-58],[38,-68],[61,-80],[-14,-59],[11,-41],[48,-71],[14,-43],[125,-136],[-50,-68],[-36,47],[-30,-33],[3,-38],[78,-109],[-11,-49],[76,-86],[-21,-46],[24,-113],[11,-175],[20,-50],[10,-77],[-22,-53],[-8,-94],[24,-49],[8,-141],[20,-46]],[[10893,6115],[-51,-13],[7,-71],[-56,-145],[-38,105],[-52,-15],[-11,-53],[17,-67],[-38,-48],[22,-137],[-28,-59],[-36,-38],[-34,1],[-47,58],[-30,-84],[-49,-33]],[[10469,5516],[-53,39],[1,30],[-41,48],[-67,15],[-18,59],[-36,-4],[-37,27],[-35,-82],[-4,-53],[-48,-38],[-89,82],[-64,-20],[-35,54],[-79,90],[-37,11],[-36,-42],[-43,-8],[3,51],[70,55],[-9,54],[-51,103],[-39,24],[-7,34],[-66,-40],[-9,46],[61,35],[21,40],[-69,7],[-27,62],[-80,-5],[-39,-20],[-51,9],[-11,-68],[-54,18],[-33,-22],[-1,-43],[-88,2],[-49,-22],[-86,32],[-91,7],[-31,65],[-32,20],[-43,-49],[-56,-14],[-54,-60],[33,-41],[-42,-51],[-95,-38],[-172,-106],[-76,0],[-124,-99],[-27,-71],[-104,-96],[-30,2],[-53,-50],[20,-38],[-31,-68],[-81,-51],[-58,-20],[-30,19],[-70,-15],[-41,-37],[-86,20],[-60,-2],[-4,106],[-87,24],[-64,44],[-40,-9],[-35,-48],[-51,6],[-28,28],[-96,30],[-89,-8],[48,89],[-139,57],[-82,6],[-89,-28],[-45,-62],[-83,-27],[-50,-58],[-47,-89],[-47,-34],[-42,-100],[-32,-11],[-34,-50],[-9,-47],[20,-57],[-45,-8],[-51,51],[-14,76],[28,61],[21,105],[-16,83],[-88,62],[-47,-43],[-52,-25],[-108,-18],[-13,-47],[-116,22],[-29,-47],[-96,9],[-62,-18],[-99,12],[-53,62],[-59,9],[-52,32],[-47,52],[-50,-7],[-20,-86],[-25,-15],[-101,51],[-20,85],[-37,-44],[19,-83],[-57,-23],[-56,151],[-39,25],[-35,57],[-27,-31],[-77,26],[-74,-17],[-76,29],[-1,65],[38,81],[-48,31],[-58,-57],[-51,6],[-52,32],[-30,52],[-67,20],[-41,71],[-51,21],[-2,70],[-42,65],[-14,57],[-66,25],[-96,-32],[-27,-40],[-60,17],[-80,162],[-71,78],[-55,-3],[-57,38],[-27,-16],[-93,100],[-33,46],[-63,45],[-107,36],[5,62],[-26,18],[-3,65],[-132,15],[-80,31],[-46,-45],[-41,23],[-13,-111],[-34,-23],[-36,-71],[-41,7],[-52,132],[-83,37],[-25,39],[-63,41],[-21,-4],[-117,59],[-36,54],[27,35],[-26,33],[-46,0],[-98,98],[-40,10],[-90,-15],[-100,95],[-41,111],[-58,61],[-37,-63],[-49,-16],[-52,24],[10,61],[-27,36],[51,54],[-38,33],[-25,57],[31,108],[-41,40],[-58,95],[-23,12],[-4,109],[-29,56],[28,21],[78,7],[36,33],[25,-98],[73,-64],[63,25],[9,45],[70,10],[86,86],[10,56],[-38,78],[-33,39],[20,94],[-174,101],[-64,84],[-18,51],[5,106],[-31,139],[4,47],[74,44],[31,32],[-8,69]],[[2287,8951],[106,55],[57,-5],[74,23],[88,-33],[32,10],[70,141],[-31,130],[69,54],[-14,38],[70,93],[61,142],[71,-58],[159,-32],[51,-30],[35,53],[64,-40],[63,9],[80,-45],[71,-3],[124,41],[36,71],[87,54],[13,49],[46,31],[121,-22],[31,19],[65,-6],[18,-41],[-3,-61],[55,-43],[63,5],[136,-34],[130,8],[49,23],[63,-21],[35,6],[149,95],[92,22],[62,50],[97,33],[47,-11],[55,15],[98,-45],[42,46],[91,2],[67,63],[53,133],[80,30],[26,27],[109,7],[31,16],[174,24],[64,39],[97,-22],[151,27],[32,25],[196,12],[108,-45],[49,3],[56,-48],[113,-13],[194,-101]],[[2287,8951],[-66,41],[-83,73],[-98,18],[-45,44],[-27,105],[-27,53],[-7,62],[-55,118],[23,102],[-30,23],[-44,-35],[-35,36],[-60,-21],[-106,7],[-69,34],[-62,4],[-28,26],[-61,2],[-139,90],[-3,63],[-56,-3],[-52,-28],[-62,-2],[-22,75],[-23,28],[-59,22],[-12,37],[51,73],[-19,40],[3,89],[-43,87],[-36,38],[-94,44],[-34,-26],[-35,15],[-25,93],[-107,44],[-81,-18],[-106,51],[-52,-18],[-75,70],[52,43],[58,3],[42,37],[26,-43],[122,51],[41,49],[-116,110],[-3,30],[34,63],[-35,43],[4,83],[-43,49],[-9,116],[29,49],[-27,72],[-188,87],[-83,1],[-89,-77],[-58,41],[-48,139],[56,77],[-50,47],[-41,87],[17,56],[-4,62],[80,11],[46,69],[-15,66],[-30,52],[78,142],[69,25],[87,0],[143,125],[54,-7],[-19,56],[21,51],[87,-39],[66,0],[123,95],[33,11],[46,-101],[-12,-46],[18,-42],[102,9],[67,46],[32,-13],[39,41],[37,-52],[51,37],[75,118],[2,56],[60,77],[-2,43],[41,38],[62,17],[48,-18],[91,5],[61,-22],[81,11],[86,35],[89,-14],[43,37],[79,101],[0,50],[111,55],[22,34],[130,57],[140,81],[46,-5],[85,49],[58,7],[41,68],[38,12],[107,-2],[32,35],[-20,59],[25,27],[-55,213],[37,93],[107,41],[-46,91],[88,50],[85,-3],[-17,97],[-39,21],[30,73],[-101,251],[-56,106],[12,93],[-18,82],[19,140],[43,36],[-110,46],[-97,-14],[-53,31],[-4,30],[87,64],[129,14],[26,27],[116,28],[67,-9],[124,43],[254,74],[29,-83],[61,-24],[103,43],[44,3],[78,-62],[46,34],[21,90],[-8,53],[-108,25],[-30,29],[34,112],[50,92],[34,164],[45,75],[71,222],[62,116],[12,140],[59,10],[159,-80],[163,-52],[70,-5],[39,16],[215,-6],[29,-20],[3,-73],[76,19],[123,102],[126,10],[24,70],[44,16],[5,98],[-39,78],[7,55],[-34,164],[30,123],[57,121],[27,27],[95,12],[80,-7],[60,40],[99,21],[77,98],[19,75],[-31,40],[4,44],[69,64],[97,13],[122,-33],[53,27],[124,26],[3,-76],[21,-34],[-49,-26],[21,-67],[97,-39],[13,-26],[-52,-46],[96,-59],[29,0],[78,-55],[63,-28],[7,-73],[96,-59],[54,-5],[48,-57],[85,-7],[39,29],[88,-1],[90,-115],[59,0],[66,31],[16,-69],[105,-73],[48,-72],[12,-102],[104,-164],[50,-17],[44,-60],[31,-75],[-4,-80],[22,-16],[-64,-147],[42,-104],[3,-51],[-124,-149],[-26,-144],[37,-28],[25,-83],[47,-59],[29,16],[69,-10],[48,-37],[89,4],[28,-33],[60,-10],[148,9],[79,-34],[120,-10],[119,23],[82,-18],[94,1],[154,-31],[80,-43],[69,-89],[43,-30],[94,-3],[61,-79],[106,-42],[47,-51],[145,-49],[146,17],[-24,-76],[2,-79],[78,-15],[34,-61],[44,-132],[60,-123],[9,-69],[23,-39],[165,-156],[31,-117]],[[15837,1087],[11,-44],[33,-36],[63,-8],[27,-152],[-14,-47],[-38,-54],[-24,8],[-27,-68],[-25,-8],[-47,-133],[-11,-67],[-42,-96],[2,-58],[-18,-54],[-86,-21],[-53,-57],[-21,-83],[-59,15],[-34,-19],[-38,7],[-29,-83],[-47,-29],[-55,53],[-95,9],[-23,-10],[-31,45],[-38,-1],[-88,67],[-43,10],[-1,119],[-28,64],[11,47],[-16,101],[20,30],[-13,72],[27,52],[32,8],[73,66],[32,49],[60,26],[5,87],[58,64],[69,-48],[26,15],[0,50],[30,23],[52,9],[38,-32],[33,18],[55,-15],[33,11],[28,50],[45,-19],[52,26],[84,-56],[-4,56],[49,41]],[[14544,10898],[-22,-48],[-41,-1],[-32,-56],[-50,-41],[2,-34],[-36,-126],[37,-76],[-17,-53]],[[13135,10647],[29,54],[41,18],[53,-13],[127,22],[60,63],[115,51],[77,-15],[53,8],[56,36],[15,111],[-29,73],[31,50],[5,191],[24,91],[70,135],[22,79],[73,19],[-3,63],[94,9],[50,40],[75,2],[8,-90],[45,-72],[28,-19],[-20,-63],[-97,-157],[-25,-99],[-75,-93],[153,-78],[99,-20],[44,13],[69,-40],[34,-80],[108,-38]],[[16018,11747],[49,-41],[-45,-135],[-53,-35],[-6,-104],[-46,-108],[11,-42],[-16,-43],[-37,-23],[-44,-61],[-39,-16],[-29,-48],[1,-137],[32,-19],[27,-59],[43,-38],[15,-102],[-18,-45],[-49,-46],[14,-63],[-87,-129],[-30,-16],[3,-133],[37,-105],[5,-60],[-16,-75],[-5,-115],[28,-141],[21,-21],[25,-139],[-83,-168],[-38,-54],[-33,-140],[-9,-80],[6,-76],[36,-27]],[[15688,9103],[-4,-75],[65,-85],[-19,-36],[73,-50],[-5,-59],[21,-47],[-21,-56],[66,-42],[19,-54],[75,-59],[18,-55],[2,-70],[-17,-60]],[[15961,8355],[-65,-37],[-48,-50],[-45,25],[-25,51],[-49,-40],[-84,-10],[-60,32],[-186,28],[-61,-15],[-11,-51],[114,-36],[-8,-83],[68,-9],[84,-40],[26,-62],[5,-60],[-40,-3],[-31,-36],[-52,22],[-105,0],[-23,-28],[-8,-75],[-32,-38],[26,-57],[31,-25],[20,-81],[-24,-64],[-7,-105]],[[14912,7763],[-17,29],[-104,7],[-79,-20],[-39,-38],[-50,39],[-78,89],[-86,11],[-4,63],[-34,-1],[-36,-37],[-35,-1],[-57,39],[11,81],[-13,22],[-151,16],[-46,-34],[-102,-21],[-58,-25],[-74,67],[11,89],[-88,-16],[-27,-46],[-77,-30],[-27,12],[-30,98]],[[14544,10898],[97,-29],[45,-42],[21,-51],[125,0],[70,20],[115,7],[11,144],[31,26],[39,-35],[31,103],[-32,49],[14,75],[75,115],[65,43],[47,83],[49,9],[42,67],[16,58],[63,24],[61,70],[91,58],[-29,79],[50,-2],[48,-59],[66,31],[47,-59],[35,-2],[69,112],[71,55],[53,0],[-41,-79],[29,-21]],[[17134,10068],[-21,-74],[6,-92],[-25,-57],[-19,-148],[11,-22],[-51,-67],[-69,-35],[-85,-61],[-47,-13],[-50,-49],[-41,1],[-53,38],[-67,-50],[-200,7],[2,-69],[-99,-15],[-89,-75],[-27,-46],[-70,-23],[-27,10],[-131,-52],[-60,-45],[-151,-45],[-83,17]],[[16018,11747],[100,33],[33,43],[2,57],[28,15],[79,-9],[37,-21],[68,51],[76,175],[28,30],[49,94],[51,33],[84,-28],[59,-36],[47,29],[50,72],[54,27],[61,7],[44,-54],[79,14],[68,47],[56,3],[100,30],[14,34],[-21,47],[54,60]],[[17318,12500],[-1,-39],[46,-68],[12,-95],[63,-10],[7,-37],[-156,-60],[-38,-30],[-26,-64],[64,-55],[127,-31],[8,-112],[60,-71],[-52,-128],[-11,-72],[-76,-56],[-54,3],[-33,25],[-68,-26],[-40,-91],[28,-54],[-67,-84],[-25,-8],[-32,-60],[-7,-88],[17,-75],[99,-50],[43,-113],[58,-110],[32,-29],[-21,-109],[-71,-114],[-12,-48],[-44,-52],[9,-125],[-41,-10],[-31,-57],[-66,-18],[3,-56],[37,-48],[-5,-36],[80,-71]],[[18170,6428],[-64,-25],[-61,-3],[-64,68],[-94,2],[-29,-85],[-27,-36],[-91,-33],[-72,-15],[-33,-22],[-33,-70],[-47,-3],[-102,-39],[-69,20],[-26,-59],[-78,-25],[-69,-76]],[[17211,6027],[-55,33],[-51,-1],[-6,54],[-22,40],[60,80],[-40,137],[-42,1],[-8,86],[-44,-43],[-98,-129],[-17,-33],[-59,26],[-34,-13],[-8,59],[15,60],[-25,45],[-102,-91],[-87,8],[-34,-38],[-83,42],[-19,32],[-86,83],[-66,35],[-79,-8],[-72,12],[-72,58],[-216,36],[-11,-37],[-74,14],[-34,-22],[16,-84],[39,-51],[-62,-25],[-36,-42],[-110,75],[-137,-28],[-36,-44],[-97,-49],[-17,-19],[-40,-135],[-30,-26],[-26,-77]],[[15961,8355],[12,-32],[45,-33],[46,-95],[-3,-26],[66,-58],[61,-79],[10,-40],[77,-6],[29,-44],[117,-36],[39,-34],[61,-24],[106,14],[92,-15],[135,38],[50,-2],[108,-69],[39,4],[38,49],[48,19],[23,-33],[-1,-92],[-12,-31],[18,-92],[29,-61],[41,-17],[6,-47],[48,21],[25,35],[53,-22],[40,-41],[83,2],[-3,-91],[38,-3],[55,-43],[99,-7],[56,65],[36,-27],[2,-55],[29,-29],[37,13]],[[17211,6027],[1,-61],[46,-24],[56,-69],[-13,-96],[-24,-28],[51,-32],[22,-54],[-19,-64],[-39,-20],[-33,-84],[-42,-47],[-77,-22],[-15,-90],[-59,-127],[16,-123],[29,-21],[49,22],[29,-13],[-12,-65],[-29,-49],[59,-108],[-26,-66],[14,-95],[94,-43],[-7,-69],[-23,-38],[-7,-57],[-25,-40],[52,-18],[43,24],[22,-28],[-74,-56],[-10,-75],[-47,-102],[5,-50],[27,-43],[-23,-74]],[[13536,5282],[-30,74],[24,81],[-48,33],[-49,15],[-38,-22],[-4,-51],[-26,-31],[-83,-10],[-42,-20],[-98,64],[-17,47],[47,30],[-29,101],[-46,28],[-8,109],[81,42],[-11,19],[-153,-5],[-94,-15],[-17,-40],[36,-114],[-73,-61],[-19,26],[-40,-11],[-48,-60],[-10,-37],[34,-54],[-3,-59],[-40,-67],[-84,-98],[-42,-86],[-61,-13],[-37,-54],[10,-99],[-15,-44],[10,-60],[31,-52],[36,-152],[-27,-39],[3,-48],[-53,-19],[-68,-71],[-47,13],[7,47],[-25,18],[-135,-83],[-59,-80],[-82,8],[-30,-35],[-32,40],[-5,38],[-37,29],[-35,-11],[-7,55],[28,23],[-43,81],[-56,41],[39,109],[-57,5],[-12,53],[-86,97],[14,81],[-73,3],[-5,74],[-22,58],[-31,33],[2,37],[-90,174],[-55,-33],[-101,20],[-40,26],[-61,93],[-5,67],[49,27],[-8,59],[-61,63],[-29,63],[-37,19],[-8,38],[-41,40],[-11,55],[-33,-16],[-40,-74],[-14,-57],[-46,-20],[-2,-116],[11,-44],[-14,-39],[-46,52],[-48,89],[3,91],[-22,59],[-8,82],[9,60],[-5,144]],[[13632,2755],[-39,58],[-42,28],[-49,-29],[-67,-19],[-49,-40],[-32,2],[-31,-43],[12,-73],[-42,-64],[-28,-15],[-47,14],[-91,-83],[-38,23],[-16,54],[-60,-24],[-21,-35],[-16,-107],[-51,27],[-94,124],[-24,-17],[-17,-71],[-33,-27],[-31,81],[-39,28],[-24,-61],[-48,-39],[1,-39],[-66,-55],[-41,27],[-20,55],[-65,47],[-67,14],[-40,38],[-28,-83],[-53,-66],[-15,-47],[-87,19],[-84,-22],[-45,48],[-25,-25],[-20,-90],[-38,-31],[38,-145],[28,-20],[34,-69],[-10,-49],[28,-72],[-25,-19],[-6,-138],[44,-39],[-29,-51],[-29,2],[-45,43],[-38,10],[-94,-38],[-28,40],[11,65],[-27,22],[1,116],[-45,83],[-116,-75],[-40,-61],[-35,-26],[-70,-8],[-56,39],[-59,-54],[-42,56],[11,56],[-14,30],[-57,21],[-12,72],[19,62],[-10,45],[-52,-15],[-35,27],[-128,32],[-32,-14],[-84,18],[0,41],[49,115],[32,46],[-1,63],[-20,61],[46,76],[6,44],[45,7],[-24,65],[-55,30],[-57,-35],[-60,25],[-21,32],[-72,11],[22,66],[-15,82],[-40,48],[33,40],[-34,91],[-49,15],[0,96],[82,63],[5,33],[-65,-12],[-56,-25],[-35,25],[-73,-12],[-64,11],[-124,-54],[-108,-88],[-52,44],[82,101],[4,85],[-33,89],[-52,-4],[7,174],[55,47],[36,-2],[-19,74],[14,72],[37,95],[28,-31],[67,59],[27,43],[-4,58],[22,66],[54,-34],[24,8],[55,127],[20,24],[43,-21],[35,43],[-47,58],[-15,68],[68,38],[-21,76],[26,54],[2,72],[14,48],[-2,81],[-15,50],[-18,174],[13,71],[-12,46],[2,106],[-120,54],[-7,-66],[-38,-11],[-38,106],[-12,95],[-30,41],[4,95]],[[19238,11558],[-57,-69],[-19,28],[76,41]],[[18636,12139],[-39,-80],[24,-103],[-22,-79],[-118,37]],[[19487,12794],[-29,-54],[-85,-56],[-47,-141],[91,-94],[52,-17],[44,-50],[116,5],[7,-92],[23,-91],[46,-2],[-2,-59],[48,-63]],[[19751,12080],[-134,-52],[-84,-98],[-33,-100],[18,-56],[-51,-44],[-72,-91],[-32,-17],[-35,27],[-27,-31],[-76,5],[-117,-72],[-47,12],[-40,67],[-56,25]],[[18965,11655],[-1,69],[-47,31],[-2,92],[-112,6],[-3,50],[-38,47],[-14,132],[113,-14],[-7,55],[-128,91],[-40,17]],[[18446,11868],[-1,-61],[26,-84],[-11,-69],[28,-63],[-77,-51],[-14,-53],[13,-53],[73,-67],[60,5],[31,-53],[76,-30],[116,35]],[[18766,11324],[74,-135],[51,-59]],[[18891,11130],[-24,-59],[-40,-51],[-50,-13],[-64,-113],[-248,-7],[-40,-19],[-58,-88],[-85,-86],[-26,75],[-55,-88],[15,-41],[-120,-37],[-52,-146],[-97,-146],[-63,-23],[-58,-85],[-29,-69],[29,-68],[45,-57],[5,-51]],[[17876,9958],[-47,-42],[-45,44],[-59,13],[-31,-46],[-44,-25],[-16,35],[-79,18],[-68,-7],[-88,58],[-80,1],[-39,17],[-32,46],[-77,-11],[-37,9]],[[17318,12500],[-40,39],[-17,61],[-48,58],[-11,39],[35,30],[9,49],[-32,29],[8,69],[42,63],[73,34],[7,96],[18,52],[70,53],[26,66],[49,37],[67,-1],[22,22],[50,-134],[-19,-70],[5,-111],[89,3],[55,-17],[52,21],[-3,54],[80,28],[141,86],[34,0],[43,-70],[72,46],[73,70],[38,-34],[57,-14],[110,54],[9,111],[-22,49],[26,48],[72,37],[80,11],[72,-13],[16,50],[61,1],[64,22],[25,-12],[95,-103],[7,-52],[-22,-37],[42,-23],[20,-88],[57,29],[24,-117],[-19,-61],[-51,-19],[36,-70],[30,-13],[24,-142],[46,23],[288,-24],[34,-21]],[[17876,9958],[-15,-90],[-39,-35],[-7,-78],[43,18],[22,49],[115,31],[39,35],[42,-5],[64,45],[-19,-76],[-29,11],[-87,-76],[-46,-57],[-64,-13],[-47,-59],[-21,-66],[-51,-45],[-67,-20],[-54,-89],[-33,-17],[-13,-96],[70,-4],[75,-36],[18,-60],[43,4],[48,-35],[3,-57],[45,-55],[71,13],[46,-16],[97,16],[46,-19]],[[20393,11801],[38,-11],[-17,-51],[-45,12],[24,50]],[[22251,12564],[-61,-45],[-12,-31],[-72,-41],[-145,-63],[1,-42],[-56,14],[-78,-96],[-30,-9],[-122,-114],[-2,-50],[-64,-66],[-93,-38],[-155,34],[-13,-49],[-77,7],[-63,-16],[1,-37],[-39,-19],[-71,8],[-159,-95],[-21,-23],[-82,-31],[-120,-117],[6,-33],[-135,-93],[-17,27],[-53,-15],[3,-76],[-73,-27],[-60,3],[-81,-48],[-27,95],[249,105],[-31,73],[58,51],[-8,33],[-72,-6],[-25,15],[-24,67],[-55,-4],[0,53],[61,10],[25,44],[-22,30],[34,62],[73,37],[29,-4],[94,113],[-1,35],[42,22],[7,46],[44,39],[39,68],[-70,67],[-38,68],[-84,47],[-118,6],[-92,54],[-26,-22],[-53,12],[-79,-50],[-21,-78],[-49,-9],[-12,-42],[-76,-69],[-51,-82],[2,-43],[-30,-30],[-207,-77],[-43,-39]],[[19487,12794],[55,56],[12,54],[-31,103],[-7,66],[9,105],[19,74],[-51,51],[38,54],[97,46],[29,-67],[82,-24],[-6,-49],[36,-67],[29,-15],[30,-62],[-2,-70],[49,31],[85,98],[55,40],[18,61],[50,7],[122,75],[52,-20],[143,133],[75,19],[43,-45],[33,2],[66,46],[17,59],[54,41],[109,-46],[54,47],[-25,43],[47,28],[107,-61],[70,3],[102,45],[22,65],[74,38],[110,38],[36,151]],[[21394,13947],[47,56],[85,-80],[118,-47],[6,-38],[52,-42],[-18,-53],[61,-63],[105,130],[53,-11],[-12,-110],[35,-47],[33,-87],[32,-39],[3,-46],[46,-48],[32,-95],[84,-46],[-79,-108],[4,-153],[61,-1],[9,-58],[77,-160],[37,-23],[13,-58],[-32,-75],[-49,-51],[54,-30]],[[19508,9359],[-45,16],[-42,-31],[-90,-7],[-46,-160],[-33,-36],[-87,3],[-37,-136],[-96,-25],[-50,140],[-57,14],[-54,-14],[-7,-69],[-51,0],[-27,-30],[-52,2],[-56,62],[-27,-13],[-39,-63],[-52,143],[-51,95],[-49,43],[-83,-11],[-69,-22],[-22,-35],[-18,-108]],[[18891,11130],[45,-21],[61,-53],[56,4],[100,-21],[40,-22],[48,43],[79,4],[67,-105],[105,-107],[-88,-27],[-26,-61],[-14,-129],[12,-54],[74,-57],[126,-32],[141,17],[54,54],[-16,62],[86,44],[101,87],[6,49],[182,82],[80,-8],[46,-60],[45,-5],[23,-70],[81,-5],[41,-55],[49,-24],[29,27],[201,6],[71,-36],[68,0],[85,-19],[-45,-41],[23,-56],[-67,-34],[6,-65],[28,-48],[-88,-67],[-51,11],[4,42],[-73,37],[-108,-52],[-21,-29],[-76,-40],[-171,-55],[-58,-47],[-44,-17],[13,-52],[-85,0],[-44,-71],[21,-103],[-62,-17],[-85,-41],[-26,15],[29,69],[-16,19],[-93,-14],[-2,-58],[61,-68],[-87,-72],[-16,-64],[-44,5],[2,-62],[-39,13],[-70,-36],[-41,-113],[-55,-37],[-28,-120],[-33,-11]],[[18965,11655],[-53,-10],[-71,-60],[-4,-62],[-54,-94],[-17,-105]],[[19036,6217],[-19,-61],[-34,-13],[-22,-73],[27,-51],[71,-54],[31,-66],[30,-20],[23,-57],[-4,-51],[17,-48],[8,-103],[-12,-24]],[[20388,7371],[-66,-18],[-26,-100],[-29,-16],[-10,-58],[-65,-2],[11,-71]],[[20203,7106],[-92,-20],[7,-47],[-56,-25],[-37,-46],[-19,70],[-36,27],[-64,-10],[-36,13],[-79,79],[-5,35],[-82,15],[-47,-24]],[[19508,9359],[-38,-42],[4,-120],[62,-2],[126,-128],[79,-44],[48,-7],[77,-55],[59,-26],[49,-153],[15,-98],[39,-59],[6,-53],[49,-99],[15,-78],[32,-32],[-3,-42],[33,-37],[11,-62],[27,-7],[5,-94],[-20,-69],[21,-49],[89,-68],[100,-52],[28,-91],[10,-75],[91,-29],[71,-61],[43,-110],[-45,-35],[-60,18],[-167,93],[-73,-52],[-58,10],[-14,38],[-58,77],[-75,30],[-61,3],[-56,-31],[-40,-43],[-58,-3],[-59,40],[-36,68],[5,32],[-43,65],[-54,4],[-1,-47],[42,-20],[-2,-47],[30,-15],[65,-76],[95,-23],[123,61],[100,-23],[31,-83],[30,-36],[107,-43],[84,-108]],[[20388,7371],[87,-69],[77,-47],[65,-101],[43,-102],[-30,-32],[-118,-11],[-94,-39],[-58,-42]],[[20360,6928],[-8,29],[-65,50],[-53,-1],[-5,98],[-26,2]],[[20632,7352],[-26,-9],[-230,120],[-59,71],[38,31],[90,-39],[80,-65],[78,-25],[58,-37],[-29,-47]],[[20364,5493],[-42,-33],[-24,34],[43,64],[23,-65]],[[20743,6601],[50,-19],[2,-74],[-47,34],[-74,21],[-16,64],[49,0],[36,-26]],[[20360,6928],[-62,-51],[-65,-31],[-17,-67],[-65,-71],[-43,-13],[88,-56],[44,23],[66,63],[45,13],[52,-13],[56,-58],[73,-122],[101,-45],[29,-53],[-119,-139],[-105,-26],[3,-58],[192,122],[22,-22],[-26,-176],[14,-41],[-42,-27],[-40,22],[-56,3],[-11,47],[-51,-55],[11,-49],[54,5],[25,-48],[-5,-111],[-27,-56],[-41,-38],[42,-99],[20,-77],[-105,-19],[-52,-69],[-22,70],[-39,21],[-11,-69],[-47,-65],[-19,-64],[-55,-17],[-12,-67],[-60,-117],[-30,-30],[34,-42],[-23,-63],[-33,12],[-12,-111],[-42,2]],[[24621,14011],[12,-49],[-49,-110],[10,-24],[-45,-54],[8,-73],[-47,-34],[-96,10],[-78,-27],[-76,-46],[70,-63],[-60,-33],[-80,101],[-2,88],[-42,3],[-8,41],[-60,-8],[-44,16],[-50,-139],[-25,-168],[-79,-29],[-66,30],[-51,-36],[-14,-88],[-39,-40],[-67,-33],[-10,-30],[-93,7],[-94,-28],[-102,20],[-98,-22],[3,-63],[51,-93],[61,-71],[-50,-99],[-52,-9],[-51,45],[-41,-22],[-90,0],[-70,38],[-88,3],[-95,91],[-5,35],[-63,29],[-42,-49],[-73,-16],[-49,-129],[-103,-161],[-49,-28],[-59,-107],[-130,-23]],[[21394,13947],[-39,6],[-97,49],[-7,48],[55,29],[13,58],[-85,192],[16,60],[-44,29],[-57,161],[-34,11],[-38,-37],[-102,-62],[-145,-64],[-52,15],[12,101],[-83,106],[-18,42],[-4,132],[-11,102],[77,46],[18,48],[-42,90],[-46,19],[-27,46],[-13,68],[-64,-8],[-50,22],[63,110],[-17,54],[95,-17],[104,-92],[67,75],[43,-69],[64,-55],[54,35],[10,167],[116,10],[39,62]],[[21165,15536],[42,25],[41,-17],[241,21],[49,-141],[-23,-22],[35,-59],[-19,-50],[53,-83],[35,2],[73,-102],[72,-20],[21,18],[111,0],[66,28],[33,-57],[87,12],[53,33],[114,19],[2,-84],[58,-69],[133,-52],[115,48],[59,10],[98,-54],[70,-8],[53,-111],[-42,-60],[23,-53],[6,-73],[43,31],[37,-21],[61,18],[78,-42],[-28,-90],[95,-138],[12,-42],[45,-17],[87,39],[-4,119],[48,7],[22,49],[65,33],[25,-28],[14,-75],[-2,-89],[35,-41],[44,-93],[50,-61],[7,-52],[51,-85],[56,-9],[91,38],[9,99],[122,46],[93,3],[21,50],[48,31],[37,-21],[14,-71],[30,-5],[75,66],[23,-21],[35,-143],[74,-23],[140,-98],[34,31],[66,-39],[44,18]],[[20419,19470],[82,-42],[83,-121],[-47,-64],[-80,-74],[-141,-99],[136,-84],[86,-31],[59,-66],[80,8],[66,109],[71,-15],[65,-88],[102,-25],[19,-27],[-58,-58],[49,-138],[-17,-80],[52,-75],[2,-31],[50,-69],[56,-41],[78,-26],[71,4],[57,-38],[93,16],[33,44],[127,9],[80,-28],[65,45],[70,-14],[66,17],[102,94],[29,45],[88,-18],[65,-42],[100,-141],[53,-26],[60,-57],[31,-68],[-24,-44],[-76,-75],[-6,-113],[-119,-94],[-48,-110],[-66,-49],[14,-51],[-30,-53],[4,-202],[14,-64],[-19,-121],[-28,-38],[-126,13],[-18,-63],[-85,-177],[-36,-94],[-7,-113],[17,-73],[-58,-35],[-42,88],[-11,88],[-29,22],[-66,-46],[-150,-142],[-64,-76],[-121,-60],[-37,-74],[-175,-94],[-99,-62],[-69,-111],[72,-111],[96,-54],[85,-107],[81,-44],[61,40],[22,36],[97,-69],[-90,-98],[-45,-6],[-116,14],[-13,-114],[73,-103]],[[10074,13633],[281,-36],[347,-44],[347,-44],[232,63],[513,-82],[82,9],[97,-17],[42,-30],[64,-101],[63,-52],[444,-100],[264,-136],[13,-2],[333,64],[-1,-114],[44,-11],[124,0],[52,-27],[80,81],[31,7],[254,132],[384,163],[602,93],[61,-13],[92,2],[112,-20],[84,28],[111,-13],[98,13],[78,55],[105,44],[69,8],[142,70],[18,38],[68,59],[31,63],[108,128],[69,43],[215,87],[66,78],[77,18],[5,50],[-45,84],[-88,71],[-49,68],[-48,126],[59,103],[3,51],[80,151],[45,41],[71,26],[41,-11],[143,-8],[74,-80],[57,-24],[152,-39],[158,-13],[69,-14],[108,90],[71,18],[47,55],[109,89],[49,102],[87,22],[86,-28],[170,11],[128,28],[160,130],[67,17],[35,52],[-16,58],[61,110],[106,112],[85,41],[213,-18],[22,16],[17,107],[80,11],[49,-44],[43,4],[35,43],[154,66],[84,-14],[74,8],[47,-16],[42,45],[64,-10],[41,-44],[108,-27],[58,9],[97,-20],[96,65],[0,74],[-57,83],[-30,93],[-162,137],[-5,38],[-65,23],[-31,80],[-135,52],[-96,117],[-154,34],[-90,-17],[-67,4],[-56,-27],[-138,-169],[-19,2],[-105,86],[-93,35],[-151,-20],[-109,15],[-68,-31],[-48,-55],[-51,-2],[-124,127],[-21,104],[110,57],[16,27],[-3,143],[97,131],[4,57],[276,528],[159,-83],[84,-28],[94,-5],[122,-56],[58,19],[117,69],[151,124],[52,33],[191,18],[50,16],[46,43],[16,140],[-91,17],[44,38],[21,85],[87,77],[9,93],[99,99],[4,64],[67,73],[82,185],[20,0],[145,117],[66,20],[24,83],[32,31],[-9,67],[-57,60],[42,108],[-125,53],[-109,-29],[-51,9],[-10,89],[106,58],[72,79],[87,63],[94,88],[141,-2],[90,22]],[[20419,19470],[97,38],[106,25],[82,-1],[109,35],[57,-15],[166,5],[126,22],[42,30],[100,-23],[65,14],[40,-26],[102,-27],[64,-57],[48,16],[75,-81],[115,-20],[18,-28],[128,34],[46,-2],[168,-91],[43,11],[92,-86],[84,-100],[-26,-53],[102,-55],[56,-78],[-12,-42],[45,-16],[-44,-48],[91,-26],[-7,-61],[-29,-34],[154,-248],[-3,-64],[66,-50],[-21,-91],[11,-56],[91,-89],[61,-84],[33,-109],[-32,-49],[30,-29],[-12,-48],[106,-59],[-4,-51],[-36,-58],[21,-57],[-11,-55],[58,-31],[33,-66],[46,-30],[69,3],[43,-32],[108,4],[16,17],[121,17],[56,-21],[35,-51],[73,-57],[62,7],[71,-22],[60,34],[30,-73],[59,-3],[19,-50],[68,-80],[143,-97],[59,17],[76,-22],[47,8],[-60,-130],[78,-76],[44,-120],[-67,-92],[8,-36],[96,-93],[15,-92],[35,-19],[169,33],[67,-41],[54,15],[82,-14],[114,11],[73,26],[82,-16],[57,89],[7,45],[62,-4],[116,91],[40,10],[119,-20],[41,13],[69,73],[112,23],[31,23],[141,30],[67,-13],[67,-53],[-7,-70],[-50,-53],[88,-183],[-38,-68],[-85,-87],[-82,-12],[-59,-84],[31,-77],[-44,-27],[-44,-131],[10,-34],[-24,-81],[-59,-81],[31,-39],[-25,-39],[16,-44],[-91,-65],[13,-35],[-26,-80],[-61,-31],[-12,-107],[-31,-63],[-91,-34],[-26,-42],[-18,-106],[7,-67],[-69,-55],[-48,19],[-18,73],[-33,33],[-129,49],[-95,-2],[-88,-58],[-74,57],[-40,-65],[-41,-9],[-8,-61],[-81,-72],[-38,5],[-74,-37],[-45,4],[-51,-37],[57,-89],[85,-348],[-40,-151],[9,-107],[-11,-37],[37,-29]],[[17275,2292],[-53,-65],[-15,45],[68,20]],[[17351,2418],[46,-60],[-26,-31],[1,-67],[-42,13],[-30,40],[-84,6],[36,62],[36,23]],[[17064,2201],[5,-2],[2,0],[0,-2],[-1,-2],[-2,-1],[-2,0],[-1,-5],[3,-2],[2,-1],[2,2],[0,-1],[-1,-2],[2,-2],[3,0],[0,-1],[0,-1],[0,-2],[0,0],[-1,0],[-3,1],[0,-3],[-1,-1],[-2,1],[-1,2],[0,-4],[-1,-2],[0,-3],[-1,-1],[-2,3],[-3,-2],[0,-1],[-1,0],[-1,0],[-1,1],[-1,3],[1,1],[-1,14],[0,0],[-3,5],[-1,2],[0,0],[1,5],[3,0],[0,1],[5,1],[2,-1]],[[17062,2227],[1,-2],[0,-2],[-2,1],[-1,-2],[0,-1],[1,-1],[3,2],[-2,-3],[0,0],[-1,1],[0,-1],[0,-1],[0,-1],[0,-1],[0,-1],[-1,-1],[-3,-2],[-1,-1],[-2,0],[-1,-2],[-2,0],[-1,-2],[0,0],[-2,5],[0,0],[0,1],[1,3],[1,1],[0,1],[2,4],[2,3],[0,2],[-1,0],[0,-1],[-2,-1],[-1,3],[1,1],[0,0],[3,0],[1,2],[1,2],[2,-2],[0,-1],[3,-1],[1,-2]],[[20514,3897],[35,-40],[74,-21],[6,-90],[-35,-53],[-4,-117],[18,-52],[-33,-65],[-3,-69],[-47,-64],[-23,-65],[9,-28],[-46,-203],[-25,-175],[-23,-49],[-4,-61],[-43,-103],[-47,-64],[-20,-57],[-52,-52],[-31,-67],[-31,-131],[2,-130],[-17,-72],[-58,31],[-3,73],[-33,101],[-46,72],[-77,52],[-67,202],[-2,72],[-48,76],[31,117],[-3,88],[28,141],[44,76],[20,61],[66,116],[33,96],[33,44],[23,68],[62,58],[23,70],[67,118],[137,60],[24,46],[45,26],[41,-36]]]};
var chinaBbox = [ 73.5305, 22.7591, 134.7803, 53.6316 ];

var localTopojson = {
	"type":"Topology", 
	"arcs":[[[2532,1084],[6,-31],[17,22]],[[2555,1075],[-15,64]],[[2540,1139],[29,20]],[[2569,1159],[11,-13],[-3,-75],[3,-75],[-76,-75],[-38,-111],[-138,-115],[-158,-117],[-87,-53],[-47,-58],[42,-26],[-4,-91],[113,-70],[-18,-41],[-39,-47],[21,-78],[9,-38],[-29,12],[-46,34],[-162,-122],[-61,46],[-50,78],[-109,-11],[-62,30],[-102,-11],[-21,33],[-103,112],[-12,37],[9,50],[-65,50],[7,40],[-14,75]],[[1340,529],[65,14],[132,23],[87,33],[333,57],[81,64],[39,22],[203,179],[39,23],[16,28],[101,29],[96,83]],[[2532,1084],[23,-9]],[[1340,529],[-8,14],[-48,28],[-26,123],[-25,28],[11,121],[-48,110],[14,156]],[[1210,1109],[0,50],[37,0]],[[1247,1159],[168,-36],[69,54],[-5,70],[4,46],[-12,43],[158,-18],[28,128],[83,79],[43,26],[40,64],[57,23]],[[1880,1638],[27,-29],[31,-101],[123,-101],[-7,-81],[90,-47],[117,20],[10,11]],[[2271,1310],[19,0],[0,26]],[[2290,1336],[19,0],[0,25]],[[2309,1361],[102,13],[55,-27],[86,-35],[17,-77],[0,-76]],[[2540,1139],[-8,-55]],[[1992,1814],[23,-8],[-17,-23],[-6,31]],[[2015,1973],[14,-33],[-81,11],[67,22]],[[1992,1814],[-54,-61],[172,-188],[186,-109],[13,-95]],[[2309,1361],[-19,0],[0,-25]],[[2290,1336],[-19,0],[0,-26]],[[1880,1638],[-24,47],[-51,-15],[-101,34],[-68,-21],[-91,80],[-70,-62],[-60,-13]],[[1415,1688],[12,34],[7,42]],[[1434,1764],[28,27],[16,139],[30,61]],[[1508,1991],[48,-12],[95,-75],[54,22],[61,49],[30,-49],[186,-31],[10,-81]],[[1930,1996],[6,-31],[-22,9],[16,22]],[[2768,2601],[6,-31],[-23,9],[17,22]],[[1434,1764],[-206,-20],[-82,60],[-124,-10],[-63,59],[-57,49],[-32,49],[-55,34],[-136,-11],[-9,67]],[[670,2041],[11,37],[-3,26],[3,25],[-3,27],[40,22],[16,79],[96,173],[8,190],[10,17],[96,50],[61,-10],[159,27],[138,-24],[63,142],[106,25],[28,-17],[49,46],[99,-46],[10,-58],[-92,-52],[-74,-71],[-29,-345],[-20,-99],[3,-48],[55,-128],[8,-38]],[[1303,1487],[0,25]],[[1303,1512],[24,-13],[-24,-12]],[[1303,1512],[-24,-13],[24,-12]],[[1303,1487],[-10,-114],[5,-52],[-22,-100],[-20,-23],[-9,-39]],[[1210,1109],[-28,-12],[-18,-26],[-75,-25],[-53,-77],[-87,4],[-93,-5],[-55,3],[-36,-2],[-71,-149],[-70,50],[-19,-1],[-177,63],[8,65],[35,36],[21,48],[-61,63],[-75,26],[-45,-79],[-40,32],[-66,36],[-93,-94],[-94,37],[-18,32],[8,90],[22,46],[20,73],[-31,167],[15,89],[75,26],[-17,100],[98,34],[15,80],[55,-17],[79,21],[23,-43],[51,-28],[43,12],[56,-15],[113,30],[60,52],[-9,63],[-62,-17],[-54,15],[11,73],[40,-11],[-8,56],[67,11]],[[1415,1688],[-13,-10],[16,-68],[-70,-32],[-8,-41],[-30,21],[-7,-46]]],
	"transform":{
		"scale":[0.0005371304974765663,0.000396932673553791],
		"translate":[118.40734499999999,33.983735578125]
	},
	"objects":{"collection":{"type":"GeometryCollection","geometries":[{"arcs":[[0,1,2,3,4]],"type":"Polygon","properties":{"name":"灌南县","id":"320724"}},{"arcs":[[[5,-1]],[[-5,6,7,8,9,10,11,12,-3,13]]],"type":"MultiPolygon","properties":{"name":"灌云县","id":"320723"}},{"arcs":[[[14]],[[15]],[[16,17,18,-10,19,20,21,22]],[[23]]],"type":"MultiPolygon","properties":{"name":"连云区","id":"320703"}},{"arcs":[[[24]],[[-22,25,26]]],"type":"MultiPolygon","properties":{"name":"赣榆县","id":"320721"}},{"arcs":[[[27,28]],[[29,30,-8,31,-26,-21,32]]],"type":"MultiPolygon","properties":{"name":"东海县","id":"320722"}},{"arcs":[[[-30,-28]],[[-9,-31,-29,-33,-20]]],"type":"MultiPolygon","properties":{"name":"海州区","id":"320706"}}]}}
};
var localBbox = [ 118.407345, 33.997735578125, 119.797345, 35.1235139472657 ];

nsMapData.China = getGeoData(chinaTopojson, chinaBbox, 0.65);
nsMapData.Local = getGeoData(localTopojson, localBbox, 12.2);

nsMapData.PoliceSites = [
	{name: "连云港市局", id: 320700, coordinate: [ 
	119.19221878051756, 34.59608769681832 
	   
	]},
	{name: "赣榆分局", id: 320721, coordinate: [
	 // 119.11057233810425, 34.824548986109875 
		119.014892578125, 34.80929324176269
	 ]},
	{name: "海州分局", id: 320706, coordinate: [
	 119.11567274093627, 34.467485694316964 
	]},
	{name: "连云分局", id: 320703, coordinate: [ 
	// 119.37458753585815, 34.74154196911818 
		119.36645507812499,  34.67839374011648
	]},
	{name: "东海县局", id: 320722, coordinate: [ 
	// 118.74353885650635, 34.55251827944439 
	118.78967285156249, 34.488447837809304
	]},
	{name: "灌云县局", id: 320723, coordinate: [ 
	 //119.2386531829834, 34.29875968375168 
    119.46533203125, 34.36837785748377
	]},
	{name: "灌南县局", id: 320724, coordinate: [ 
		119.37776327133179, 34.09807050200083 
	// 119.32525634765625, 34.10725639663118
	]}
];

nsMapData.Bounds = [
	{ id: "region", name: "市域", coordinates: [
		[ 119.787345, 34.473843 ],
		[ 119.787345, 34.4438430000001 ],
		[ 119.79322390625, 34.4385903144532 ],
		[ 119.791451445313, 34.4088430000001 ],
		[ 119.793228789063, 34.37899925 ],
		[ 119.752061796875, 34.3491237617188 ],
		[ 119.731910429688, 34.3052101875 ],
		[ 119.6580090625, 34.2595253730469 ],
		[ 119.572906523438, 34.2132802558594 ],
		[ 119.526402617188, 34.1919362617188 ],
		[ 119.500860625, 34.1691139960938 ],
		[ 119.523238554688, 34.158843 ],
		[ 119.521090117188, 34.1227773261719 ],
		[ 119.582061796875, 34.0947927070313 ],
		[ 119.572628203125, 34.0785622382813 ],
		[ 119.55162234375, 34.0597939277344 ],
		[ 119.562628203125, 34.0291237617188 ],
		[ 119.567345, 34.013843 ],
		[ 119.55197390625, 34.0184706855469 ],
		[ 119.527345, 34.032212140625 ],
		[ 119.440460234375, 33.983735578125 ],
		[ 119.4073840625, 34.0021901679688 ],
		[ 119.380728789063, 34.0331325507813 ],
		[ 119.322105742188, 34.0284218574219 ],
		[ 119.288990507813, 34.0405825019532 ],
		[ 119.233961210938, 34.0361611152344 ],
		[ 119.22271609375, 34.0492153144531 ],
		[ 119.167345, 34.0938430000001 ],
		[ 119.161163359375, 34.1085646796876 ],
		[ 119.165611601563, 34.1284169746094 ],
		[ 119.131065703125, 34.1481349921876 ],
		[ 119.1346496875, 34.1641127753907 ],
		[ 119.127345, 34.193843 ],
		[ 119.122896757813, 34.1993959785156 ],
		[ 119.096925078125, 34.2103408027344 ],
		[ 119.082896757813, 34.2593959785156 ],
		[ 119.069405546875, 34.2702016425782 ],
		[ 119.07537234375, 34.3181764960938 ],
		[ 119.049615507813, 34.3619899726563 ],	
		[ 119.057345, 34.423843 ],
		[ 119.042154570313, 34.4190334296875 ],
		[ 119.032535429688, 34.4086525703126 ],
		[ 118.992154570313, 34.3990334296876 ],
		[ 118.963585234375, 34.3681996894532 ],
		[ 118.917345, 34.3700319648438 ],
		[ 118.867345, 34.3680507636719 ],
		[ 118.837345, 34.3692397285156 ],
		[ 118.818258085938, 34.3684828925781 ],
		[ 118.779986601563, 34.3092177558594 ],
		[ 118.742511015625, 34.329048078125 ],
		[ 118.732203398438, 34.3286391425782 ],
		[ 118.637345, 34.353843 ],
		[ 118.64170046875, 34.3794863105469 ],
		[ 118.66045046875, 34.3939601875001 ],
		[ 118.67170046875, 34.4127614570313 ],
		[ 118.639058867188, 34.4379555488281 ],
		[ 118.598424101563, 34.4481996894532 ],
		[ 118.574136992188, 34.4167299628907 ],
		[ 118.55298953125, 34.4294863105469 ],
		[ 118.5176965625, 34.4439308906251 ],
		[ 118.467301054688, 34.4065676093751 ],
		[ 118.417100859375, 34.4212038398438 ],
		[ 118.407345, 34.433843 ],
		[ 118.41142703125, 34.4697585273438 ],
		[ 118.42326296875, 34.4879274726562 ],
		[ 118.434019804688, 34.5166762519531 ],
		[ 118.4176965625, 34.5831166816407 ],
		[ 118.425577421875, 34.6182570625001 ],
		[ 118.465767851563, 34.6285707832032 ],
		[ 118.456803007813, 34.6685707832031 ],
		[ 118.509176054688, 34.6820119453125 ],
		[ 118.517345, 34.7138430000001 ],
		[ 118.546768828125, 34.70675315625 ],
		[ 118.589244414063, 34.7151467109376 ],
		[ 118.601519804688, 34.6980178046876 ],
		[ 118.629386015625, 34.687270734375 ],
		[ 118.652345, 34.6918068671875 ],
		[ 118.682345, 34.6858791328125 ],
		[ 118.742896757813, 34.6978444648438 ],
		[ 118.775382109375, 34.7184694648438 ],
		[ 118.770455351563, 34.7434096503906 ],
		[ 118.737345, 34.7368666816406 ],
		[ 118.708155546875, 34.7426357246094 ],
		[ 118.713858671875, 34.7715077949219 ],
		[ 118.735631132813, 34.7672048164063 ],
		[ 118.731202421875, 34.7896303535157 ],
		[ 118.767345, 34.793843 ],
		[ 118.77312625, 34.8085512519531 ],
		[ 118.771607695313, 34.818843 ],
		[ 118.773082304688, 34.8288430000001 ],
		[ 118.771519804688, 34.8394130683594 ],
		[ 118.79298953125, 34.8481996894531 ],
		[ 118.80170046875, 34.8794863105469 ],
		[ 118.85298953125, 34.9481996894532 ],
		[ 118.857345, 35.023843 ],
		[ 118.8626965625, 35.0305239082032 ],
		[ 118.914508085938, 35.0504396796876 ],
		[ 118.947345, 35.0463552070313 ],
		[ 119.032345, 35.0569277167969 ],
		[ 119.106470976563, 35.0477077460938 ],
		[ 119.14064578125, 35.1039760566407 ],
		[ 119.197345, 35.113843 ],
		[ 119.212608671875, 35.1070058417969 ],
		[ 119.238682890625, 35.1253139472657 ],       
		[ 119.291842070313, 35.1071974921875 ],
		[ 119.297345, 35.083843 ]//,
		//[ 119.2476965625, 35.0634902167969 ],
		// [ 119.208131132813, 35.0350136542969 ],
		// [ 119.192808867188, 34.8983803535157 ],
		// [ 119.181812773438, 34.8590578437501 ],
		// [ 119.18375125, 34.8400356269531 ],
		// [ 119.212808867188, 34.7893056464844 ],
		// [ 119.217345, 34.773843 ],
		// [ 119.242896757813, 34.7693959785157 ],
		// [ 119.293931914063, 34.7393959785157 ],
		// [ 119.322896757813, 34.7482900214844 ],
		// [ 119.356143828125, 34.7678322578126 ],
		// [ 119.371793242188, 34.7482900214844 ],
		// [ 119.471788359375, 34.7357826972657 ],      
		// [ 119.477345, 34.7038430000001 ],
		// [ 119.46910858154295, 34.664840578219305 ],
		// [ 119.540640898438, 34.6049404121094 ],
		// [ 119.640621367188, 34.5615798164063 ],
		// [ 119.647345, 34.5238430000001 ],
		// [ 119.70255984375, 34.5292726875 ],
		// [ 119.73197390625, 34.5184706855469 ],
		// [ 119.7780871875, 34.5045864082032 ]
    ] },
	{ id: "province", name: "省域", coordinates: [
        [ 118.407345, 34.433843 ],
        [ 118.41142703125, 34.4697585273438 ],
        [ 118.42326296875, 34.4879274726562 ],
        [ 118.434019804688, 34.5166762519531 ],
        [ 118.4176965625, 34.5831166816407 ],
        [ 118.425577421875, 34.6182570625001 ],
        [ 118.465767851563, 34.6285707832032 ],
        [ 118.456803007813, 34.6685707832031 ],
        [ 118.509176054688, 34.6820119453125 ],
        [ 118.517345, 34.7138430000001 ],
        [ 118.546768828125, 34.70675315625 ],
        [ 118.589244414063, 34.7151467109376 ],
        [ 118.601519804688, 34.6980178046876 ],
        [ 118.629386015625, 34.687270734375 ],
        [ 118.652345, 34.6918068671875 ],
        [ 118.682345, 34.6858791328125 ],
        [ 118.742896757813, 34.6978444648438 ],
        [ 118.775382109375, 34.7184694648438 ],
        [ 118.770455351563, 34.7434096503906 ],
        [ 118.737345, 34.7368666816406 ],
        [ 118.708155546875, 34.7426357246094 ],
        [ 118.713858671875, 34.7715077949219 ],
        [ 118.735631132813, 34.7672048164063 ],
        [ 118.731202421875, 34.7896303535157 ],
        [ 118.767345, 34.793843 ],
        [ 118.77312625, 34.8085512519531 ],
        [ 118.771607695313, 34.818843 ],
        [ 118.773082304688, 34.8288430000001 ],
        [ 118.771519804688, 34.8394130683594 ],
        [ 118.79298953125, 34.8481996894531 ],
        [ 118.80170046875, 34.8794863105469 ],
        [ 118.85298953125, 34.9481996894532 ],
        [ 118.857345, 35.023843 ],
        [ 118.8626965625, 35.0305239082032 ],
        [ 118.914508085938, 35.0504396796876 ],
        [ 118.947345, 35.0463552070313 ],
        [ 119.032345, 35.0569277167969 ],
        [ 119.106470976563, 35.0477077460938 ],
        [ 119.14064578125, 35.1039760566407 ],
        [ 119.197345, 35.113843 ],
        [ 119.212608671875, 35.1070058417969 ],
        [ 119.238682890625, 35.1253139472657 ],
        [ 119.291842070313, 35.1071974921875 ],
        [ 119.297345, 35.083843 ]
	] },
	{ id: "city", name: "城域", coordinates: [
		[ 119.22294616699219, 34.79068657192741 ],
		[ 119.2133331298828, 34.78222760653013 ],
		[ 119.22019958496094, 34.770383597610284 ],
		[ 119.2133331298828, 34.75853788866992 ],
		[ 119.20303344726562, 34.7534606359175 ],
		[ 119.19754028320311, 34.74443363800103 ],
		[ 119.19548034667967, 34.73032697882122 ],
		[ 119.20234680175781, 34.71791112677537 ],
		[ 119.18861389160156, 34.69363839631074 ],
		[ 119.1803741455078, 34.685169489428475 ],
		[ 119.15702819824219, 34.65185005068875 ],
		[ 119.14878845214842, 34.628122964254246 ],
		[ 119.13230895996092, 34.61173601463317 ],
		[ 119.12544250488281, 34.6032587366877 ],
		[ 119.12818908691406, 34.58460567894337 ],
		[ 119.12063598632811, 34.578387062362864 ],
		[ 119.10690307617188, 34.56255575713365 ],
		[ 119.10758972167969, 34.54445914629713 ],
		[ 119.08905029296874, 34.53597500508991 ],
		[ 119.10415649414061, 34.50881994305571 ],
		[ 119.14192199707031, 34.51843837329511 ],
		[ 119.18243408203124, 34.527489999202025 ],
		[ 119.21539306640626, 34.535409364930814 ],
		[ 119.24217224121092, 34.5523768978701 ],
		[ 119.25521850585938, 34.577256354814104 ],
		[ 119.34104919433594, 34.633772886265064 ],
		[ 119.36645507812499, 34.64846088254815 ],
		[ 119.41246032714842, 34.677829069312956 ],
		[ 119.41795349121095, 34.681781684080676 ],
		[ 119.45365905761719, 34.67500565754207 ]
	] },
	{ id: "kernel", name: "核心域", coordinates: [
		[ 119.21693801879883, 34.61724578115146 ],
		[ 119.2232036590576, 34.58743216902532 ],
		[ 119.19977188110352, 34.583687048966866 ],
		[ 119.16990280151366, 34.58114309757545 ],
		[ 119.1661262512207, 34.594709938456454 ],
		[ 119.16638374328613, 34.60106863254806 ],
		[ 119.16166305541992, 34.6048836153396 ],
		[ 119.16938781738281, 34.61491477071779 ],
		[ 119.177885055542, 34.61908228872057 ],
		[ 119.1808032989502, 34.619364824739804 ],
		[ 119.20131683349608, 34.61682196594164 ],
		[ 119.20680999755861, 34.617387052407175 ],
		[ 119.21582221984862, 34.61710450965532 ],
		[ 119.21693801879883, 34.61724578115146 ]
	] }
];
}());
(function(){
var nsLib = IXW.ns("Lib");

function Timer(intv){
	var working = false;
	var fnArr = [];
	function work(){
		setTimeout(work, intv);

		if (!working) return;
		var ticks = (new Date()).getTime();
		for (var i = 0; i < fnArr.length; i++ )
			fnArr[i](ticks);
	}
	work();

	return {
		start: function(){ working = true; },
		stop: function(){ working = false; },
		clear: function(){ fnArr = []; },
		register: function(fn){ fnArr.push(fn); }
	};
}

function doTransition(intv, _times, stepFn, endFn){
	var times = 0;

	function work(){
		var i = 0;
		if (times >= _times)
			return endFn();

		setTimeout(work, intv);
		times += 1;
		stepFn(times);
	}
	setTimeout(work, intv);
}

nsLib.Timer = Timer;
nsLib.doTransition = doTransition;
}());

(function(){
var nsGlobal = IXW.ns("Global");
var nsMapData= IXW.ns("MapData");
var ixwD3 = IXW.LibD3;
var markNumber = IX.Math.markNumber;

var localMap = nsMapData.Local;
var Sites = nsMapData.PoliceSites;
var Bounds = IX.map(nsMapData.Bounds, function(b){  return IX.inherit(b, {type: "LineString"});  });
var BoundNames = ["province", "region", "city", "kernel"];

function getTranslateMatrix(pos){
	return "translate(" + pos.join() + ") ";
}

var ColumnImgUrl = nsGlobal.getMapImageUrl("column");
var ColumnWidth = 19, ColumnBaseHeight = 20, ColumnHeight = 128;
function getColumnMatrix(r){
	var h = ColumnBaseHeight + ColumnHeight * r;
	var scaley = h / (ColumnBaseHeight + ColumnHeight);
	return "translate(" + (0 - ColumnWidth / 2) + "," + (0 - h) + ") scale(1, " + scaley + ") translate(0," + ColumnBaseHeight + ") ";
}
function showSiteColumns(dataLayer, sites, data){
	var maxV = 1;
	var valHT = IX.loop(data, {}, function(acc, item){
		acc[item.id] = item.num;
		maxV = Math.max(maxV, item.num);
		return acc;
	});
	var items = IX.map(sites, function(site){
		var val = valHT[site.id];
		var ry = val / maxV;
		return IX.inherit(site, {
			value:  markNumber(val),
			transform: getTranslateMatrix(site.pos),
			ry: ry,
			ty: ColumnBaseHeight + ColumnHeight * ry
		});
	});

	var columnEls = dataLayer.selectAll('.column').data(items, function(d){return d.id;});
	var newColumns = columnEls.enter().append("g").attr("class", "column")
			.attr("transform", function(d){return d.transform;});
	// newColumns.append("circle")
	// 		.attr("cx", 0)
	// 		.attr("cy", 0)
	// 		.attr("r", 6);
	newColumns.append("image")
			.attr("xlink:href", ColumnImgUrl)
			.attr("opacity", 0)
			.attr("width", ColumnWidth)
			.attr("height", ColumnHeight)
			.attr("transform", getColumnMatrix(0));
	newColumns.append("text")
			.attr("dx", 0)
			.attr("dy", function(d){return 0 - d.ty;});

	columnEls.selectAll("text")
			.attr("opacity", 0)
			.text(function(d){return d.value;});

	columnEls.on("mouseover", function(d){
		d3.select(this).classed("hover", true);
	}).on("mouseout", function(d){
		d3.select(this).classed("hover", false);
	});			

	var animate = columnEls.transition().duration(1000);		
	animate.selectAll("image").attr("opacity", 1)
			.attr("transform", function(d){return getColumnMatrix(d.ry); });
	// animate.each("end", function(){
	// 	columnEls.selectAll("text").attr("opacity", 1);
	// });
}

var alarmImgUrls = IX.map([0, 1, 2], function(idx){return nsGlobal.getMapImageUrl("alarm" + idx); });
var AlarmIconWidth = 48, AlarmHeight = 48;
var AlarmIconX =  -24, AlarmIconY = -24;
var triggerEl = null;
function AlaramLayer(gEl, onfocus){
	var isAnimating = false;
	function repeatAnimate(){
		var imageEls =  gEl.selectAll("image");
		imageEls.attr("opacity", function(){
			var alarmEl = d3.select(this);
			var isAlarm0 = alarmEl.classed("alarm0") ;
			var isAlarm2 = alarmEl.classed("alarm2") ;
			if(!isAlarm2){
				return isAlarm0 ? 0.4 : 1; 
			}else{
				return 0;
			}
			return d3.select(this).classed("alarm0") ? 0.4 : 1;
		});
		imageEls.transition().duration(3000).attrTween("opacity", function(){
			var alarmEl = d3.select(this);
			var isAlarm0 = alarmEl.classed("alarm0") ;
			var isAlarm2 = alarmEl.classed("alarm2") ;
			return function(t){
				if(!isAlarm2 && !alarmEl.classed("focused")){
					var v = Math.abs(1 - 2 * t);
					return isAlarm0 ? (1 - 0.6 * v) : (0.2 + 0.8 * v); 
				}else{
					return 0;
				}
			};
		}).each("end", repeatAnimate);
	}
	function focus(alarmEl, d){
		//console.log("alarm: ",alarmEl, d);
		triggerEl = alarmEl;
		gEl.selectAll(".alarm").classed("focused",false);
		triggerEl.classed("focused",true);
		onfocus(d, alarmEl);
	}
	function refresh(alarms){
		var alarmEls = gEl.selectAll(".alarm").data(alarms, function(d){return d.id;});
		var newAlarms = alarmEls.enter().append("g")
				.attr("class", function(d){ return d.id + " alarm"; })
				.attr("transform", function(d){ return getTranslateMatrix(d.pos); });
		newAlarms.selectAll("image").data(alarmImgUrls).enter().append("image")
				.attr("xlink:href", function(d){ return d; })
				.attr("class", function(d, idx){ return "alarm" + idx; })
				.attr("x", AlarmIconX)
				.attr("y", AlarmIconY)
				.attr("width", AlarmIconWidth)
				.attr("height", AlarmHeight)
				.attr("opacity",function(d,idx){
					if(idx == 2){ return 0;}
				});
		newAlarms.on("click", function(d){
			focus(d3.select(this), d);
		}).on("mouseover", function(d){
			d3.select(this).classed("hover", true);
			if(triggerEl && !triggerEl.classed("focused")){
				alarmEls.classed("focused",false);
				triggerEl.classed("focused", true);
			}
		}).on("mouseout", function(d){
			d3.select(this).classed("hover", false);
		});
		alarmEls.exit().remove();

		if (!isAnimating) {
			isAnimating = true;
			repeatAnimate();
		}
	}

	return {
		refresh: refresh,
		focus: function(alarmId){
			var alarmEl = gEl.select("." + alarmId);
			focus(alarmEl, alarmEl.data()[0]);
		}
	};
}

var nsModule = IXW.ns("Homepage");
nsModule.showMapInfo = function(el){
	var model = new ixwD3.GeoModel(localMap);
	var getXY4Site = model.getXY4Site;
	var policeSites = IX.map(Sites, function(s){ return {
		id: s.id,
		pos: getXY4Site(s.coordinate)
	}; });
	var onfocusFn = IX.emptyFn;
	var mapView = new ixwD3.GraphWrapper(el, function(svg){
		return new ixwD3.LayerMap(svg, model, "bound,over,data,alarm".split(","));
	}, { draggable: false });

	var dataLayer = mapView.getLayerByName("data");
	var boundLayer = mapView.getLayerByName("bound");
	var alarmView = new AlaramLayer(mapView.getLayerByName("alarm"), function(d,alarmEl){
		var arr = d.id.split("-"), pos = d.pos;
		var cx = el.offsetLeft + el.offsetWidth / 2,
			cy = el.offsetTop + el.offsetHeight / 2;
		onfocusFn({
			id : arr[1],
			type: arr[0],
			pos: d.lnglat,
			xy: [Math.floor(cx + pos[0]), Math.floor(cy + pos[1])]
		}, [cx, cy]);
	});

	function processAlaramData(type, items){
		return IX.map(items, function(evt){ return {
			id: type + "-" + evt.id,
			lnglat: evt.pos,
			pos : getXY4Site(evt.pos) 
		}; });
	}

	boundLayer.selectAll("path").data(Bounds).enter().append("path")
			.attr("d", model.getGeoPath())
			.attr("class", function(d){ return d.id + " bound"; });
	nsGlobal.serviceCaller("getData4Map", {}, function(data){
		showSiteColumns(dataLayer, policeSites, data);
	});

	return {
		toggleBound: function(name){
			var boundEl = boundLayer.select("." + name);
			var ifVisible = boundEl.classed("hidden");
			boundEl.classed("hidden", !ifVisible);
		},
		refresh: function(carEvts, faceEvts){
			alarmView.refresh([].concat(
				processAlaramData("car", carEvts),
				processAlaramData("face", faceEvts)
			));
		},
		onfocus: function(fn){
			if (IX.isFn(fn)) onfocusFn = fn;
		},
		focus: function(evtId, type){
			alarmView.focus((type.indexOf("car")>=0 ? "car-": "face-") + evtId);
		},
		blur: function(){
			triggerEl.classed("focused",false);
			triggerEl = null;
		}
	};
};
})();
(function(){
var nsGlobal = IXW.ns("Global");
var nsMapData= IXW.ns("MapData");
var ixwD3 = IXW.LibD3;
var markNumber = IX.Math.markNumber;

var chinaMap = nsMapData.China;

function getSimpleProvinceName(prvName){
	return prvName.replace(/省|市|自治区|壮族|维吾尔|回族|中国|特别行政区/g, "");
}

var MaxColor = d3.rgb(10,160,229); //255, 255, 0); //10,160,229);
var MinColor = d3.rgb(2,56,83);//0,31,63); //2,56,83);
var computeColor = d3.interpolate(MinColor, MaxColor);
// 230 X 126
function showValueColorIndics(gEl){
	var defs = gEl.append("defs");
	var linearGradient = defs.append("linearGradient")
			.attr("id","value-color-indics")
			.attr("x1","0%")
			.attr("y1","0%")
			.attr("x2","0%")
			.attr("y2","100%");
	linearGradient.selectAll("stop").data([MaxColor, MinColor]).enter().append("stop")
			.attr("offset",function(d, idx){return (idx === 0 ?0 : 100) +"%"; })
			.style("stop-color", function(d){return d.toString(); });

	var colorRect = gEl.append("rect")
			.attr("x", 200)
			.attr("y", 20)
			.attr("width", 10)
			.attr("height", 100)
			.style("fill","url(#value-color-indics)");
	// gEl.append("text")
	// 		.attr("class","min")
	// 		.attr("x", 190)
	// 		.attr("y", 40)
	// 		.attr("dy", "1em")
	// 		.text(function(){ return 0; });
	// gEl.append("text")
	// 		.attr("class","max")
	// 		.attr("x", 190)
	// 		.attr("y", 120)
	// 		.attr("dy", "0em")
	// 		.text(function(){ return 1; });
}
function showTrafficOrigin(dataLayer, geodata, data){
	var dataHT = {};
	var max = 0;

	IX.iterate(data, function(item){
		var value = /*item.value || 0 ; */ Math.log(item.value  || 1 );
		dataHT[getSimpleProvinceName(item.name)] = value;
		max = Math.max(max, value);
	});

	var scaler = d3.scale.linear()
			.domain([0, max])
			.range([0, 1]);	
	dataLayer.selectAll(".part").attr("fill", function(d){
		var value = scaler(dataHT[getSimpleProvinceName(d.properties.name)] || 0);
		var color = computeColor(value);
		return color.toString();
	});
}

var nsPanel = IXW.ns("Panel");
nsPanel.showMapInfo = function(container){
	var model = new ixwD3.GeoModel(chinaMap);
	var geodata = model.getGeoData();
	var mapView = new ixwD3.GraphWrapper(container, function(svg){
		return new ixwD3.LayerMap(svg, model, ["bound", "over"]);
	}, { draggable: false });

	var dataLayer = mapView.getLayerByName("map");
	var boundLayer = mapView.getLayerByName("bound");

	showValueColorIndics(dataLayer);
	boundLayer.selectAll("path").data([model.getGeoBound()]).enter().append("path")
			.attr("d", model.getGeoPath())
			.attr("class", "bound");

	nsGlobal.serviceCaller("getOutCarOrigin", {}, function(data){
		showTrafficOrigin(dataLayer, geodata, data);
	});
};
})();
(function(){
	var nsLib = IXW.ns("Lib");
	/*千位分隔数字*/
	nsLib.changeNumSegWithComma=function(strNum){
		strNum=String(strNum);
		if (strNum.length <= 3) {
			return strNum;
		}
		if (!/^(\+|-)?(\d+)(\.\d+)?$/.test(strNum)) {
			return strNum;
		}
		var a = RegExp.$1, b = RegExp.$2, c = RegExp.$3;
		var re = new RegExp();
		re.compile("(\\d)(\\d{3})(,|$)");
		while (re.test(b)) {
			b = b.replace(re, "$1,$2$3");
		}
		return a + "" + b + "" + c;
	};
	/**
	 * 图片水平垂直居中
	 * @param  img       [图片信息,包括url,width,height]
	 * @param  maxWidth  [div区域宽]
	 * @param  maxHeight [div区域高]
	 * @return "width:*px;height:*px;margin-left:*px;margin-top:*px;";
	 */
	nsLib.handleImg = function (img,maxWidth,maxHeight){
		var imgW = img.width,imgH = img.height;
		var ratio = Math.min(maxWidth / imgW, maxHeight / imgH); 
		var style = IX.map([
				{name:"width",base:imgW},
				{name:"height",base:imgH}
			],function(item){
				return item.name + ":" + ratio*(item.base) +"px";
			});
		style.push("margin-left:" + (Math.abs(maxWidth-imgW*ratio)/2)+"px");
		style.push("margin-top:" + (Math.abs(maxHeight-imgH*ratio)/2)+"px"); 
		return IX.extend(img,{style:style.join(";")});
	};
	/**
	 * svg绘制箭头
	 */
	nsLib.drawArrow = function(){
		var pts = [
			[0,0],
			[16,6],
			[0,12]
		];
		var r = Math.tan(25*(Math.PI/180))*16;
		var Arc = [
			[r,r],
			[0,0],
			[0],
			[0,0]
		];
		return [
			"M", pts[0].join(),
			"L", pts[1].join(),
			"L", pts[2].join(),
			"A", IX.map(Arc,function(item){
				return item.join(" ");
			}).join(","),
			"Z"
		].join(" ");
	};
})();
(function(){
var nsD3 = IXW.ns('D3');
var nsD3Lib = IXW.ns('D3Lib');
/** BaseAxis,按照给定刻度和画图区域渲染轴以及刻度,网格线等 
	axisEl : x或y轴 g标签
	rect : [w, h]
	options : {
		type : 'x' || 'y'， 			//轴类型,dafult : 'x',x代表水平方向，y代表垂直方向
		valueType :'int' || 'enum',		//刻度值类型,int整型，enum枚举型 default:int
		tickMarkPlacement : 'between', 	//刻度类型：bettween：表示段刻度，on表示点刻度 
										//即刻度文字与刻度线的对齐方式，on(与刻度线对齐)/between(两个刻度中间);default:on
		showGridLine: true,  			//是否显示轴刻度网格线，default:true
		showAxisLine : false, 			//是否显示轴基准线，default:true
		tickPadding : 10,       		//刻度文字与轴之间的距离，default:10
	}
	return ｛
		resize : function(rect),
		refresh : function(marks) 		//刻度值渲染
		getPos: function(val)			//返回值对应的坐标;
	｝
 */
function BaseAxis(gEl,rect,options){
	var type = $XP(options,'type','x');
	var iTicks  = $XP(options,'iTicks',5);
	var tickPadding = $XP(options,'tickPadding',10)+8;
	var showGridLine = $XP(options,'showGridLine',true);
	var showAxisLine = $XP(options,'showAxisLine',true);
	var valueType = $XP(options,'valueType','enum');
	var tickMarkPlacement = $XP(options,'tickMarkPlacement','on');
	var scale = null;
	var marks = [];
	var ticksEl = null,iPerTrans = 0,aTicksData = [];
	var placement = {};
	var baseRegion = 0;
	
	//确定轴位置
	var axisEl = gEl.append('g')
		.attr('class',type + '-axis')
		.attr('transform',function(){	return type == 'y' ?　'translate(0,0)' : 'translate(0,'+rect[1]+')';});
	
	//根据刻度值类型，确定比例尺
	switch(valueType){
		case 'int':
			scale = d3.scale.linear().range(type=='x'?[0,rect[0]] : [rect[1],0]);
			break;
		case 'enum':
			scale = d3.scale.ordinal().rangeBands(type == 'x' ? [0,rect[0]] : [rect[1],0],0,0);
			break;
	}
	/**setPos 
	 *  1.根据轴类型
	 *  	1)确定x或y的区域范围baseRegion
	 *  	2)确定各项布局值，如轴位置，刻度线位置，网格线位置，文本位置等；
	 *  2.根据刻度类型 确定刻度线数及每个刻度线的偏移量
	 * cbFn 回调函数，用于render或resize
	 */
	function setPos(cbFn){
		baseRegion = type == 'x' ? rect[0] :  rect[1];
		switch(tickMarkPlacement){
			case 'on':
				iPerTrans = baseRegion/(marks.length-1);
				aTicksData = d3.range(marks.length);
				break;
			case 'between':
				iPerTrans = baseRegion/(marks.length);
				aTicksData = d3.range(marks.length+1);
				break;
		}
		var basePos = {x1:0,y1:0,x2:0,y2:0};
		if(type == 'x'){
			placement = {
				axisLine : IX.inherit(basePos,{x2:rect[0]}),
				tickLine : IX.inherit(basePos,{y2:3}),
				text : {x:tickMarkPlacement == 'on' ? 0 : iPerTrans/2,y:tickPadding},
				gridLine : IX.inherit(basePos,{y2:-rect[1]})
			};
		}else{
			placement = {
				axisLine : IX.inherit(basePos,{y2:rect[1]}),
				tickLine : IX.inherit(basePos,{x2:-3}),
				text : {x:-(tickPadding+8),y:6},
				gridLine : IX.inherit(basePos,{x2:rect[0]})
			};
		}
		if(cbFn)	cbFn();
	}
	function _render(){
		ticksEl = axisEl.selectAll('.tick').data(aTicksData)
			.enter().append('g').classed('tick',true)
			.attr('transform',function(d){
				var trans = [iPerTrans*d,0];
				return 'translate('+(type == 'x' ? trans.join(',') : trans.reverse().join(',')) +')';
			});
		
		var len = aTicksData.length;
		ticksEl.each(function(d,idx){
			if(type == 'x' && len>7){
				if(idx%3 === 0 || idx === 0 || idx == len-1){
					
				}else{
					d3.select(this).classed("hidden",true);
				}
			}
			d3.select(this).append('line')
				.attr(placement.tickLine);
			d3.select(this).append('text')
				.attr(placement.text)
				.text(marks[d]).style('text-anchor', 'middle');
		});
		if(showAxisLine){
			axisEl.append('line').classed('domain', true).attr(placement.axisLine);
		}else{
			axisEl.classed('axisNone','none');
		}
		if(showGridLine)
			axisEl.selectAll('g.tick')  
				.append('line')  
				.classed('grid-line',true)
				.attr(placement.gridLine);
	}
	function _resize(){
		var animate = axisEl.transition().duration(1000);
			animate.attr('transform',type == 'y' ?　'translate(0,0)' : 'translate(0,'+rect[1]+')');
		setPos(function(){
			var ticksEl = animate.selectAll('.tick').attr('transform', function(d,idx){
				var trans = [iPerTrans*d,0];
				return 'translate('+(type == 'x' ? trans.join(',') : trans.reverse().join(',')) +')';
			});
			animate.selectAll('.domain').attr(placement.axisLine);
			ticksEl.selectAll('text').attr(placement.text);
			ticksEl.selectAll('.grid-line').attr(placement.gridLine);
		});
	}
	return {
		resize : function(_rect){
			rect = _rect;
			switch(valueType){
				case 'int':
					scale.range(type=='x'?[0,rect[0]] : [rect[1],0]);
					break;
				case 'enum':
					scale.rangeBands(type == 'x' ? [0,rect[0]] : [rect[1],0]);
					break;
			}
			_resize();
		},
		refresh : function(values){
			marks = values;
			if(valueType == 'int'){
				scale.domain([0,d3.max(values)]);
			}else{
				scale.domain(values);
			}
			setPos(_render);
		},
		getPos : function(value){
			if(valueType == 'enum'){
				return iPerTrans*value;
				//return tickMarkPlacement == 'on' ? iPerTrans*value : iPerTrans*value + iPerTrans/2;
			}else{
				return scale(value);
			}
		},
		getRangeBand : function(){
			return iPerTrans;
		}
	};
}
/**Legend,按照用户自定义绘制图例方式，或者默认绘制正方形的图例与文字 
 	gEl 容器标签
 	rect : [w, h]
 	options : {
		align : 'right-top'		//标签对齐方式，x-y
		category : {
			name1 :{name : 'in', text: '本地', 
				color:'#777', fill: 'rgba(1,2,2,0.4)',	// color/fill如不提供，则填充默认颜色，后期绘制折线图或柱形图时，可以通过getLegendColor来获得到。
				renderer : function(gEl){} //自定义绘制的样式，将忽略color,fill, type;
			},
			name2 :{同上},
		},
		renderer : function(el)		//自定义绘制图例样式
 	}
 	return ｛
		refresh : function(){},
		resize : function(_rect){},		
		getLegendColor : function(){}	//未设置图例的颜色值fill或color时，使用了默认颜色。供外部获得该默认值
	｝ 
 */
function Legend(gEl,rect,options){
	var legendSize = 10,legendSpacing = 20,textRectGap = 5;
	var category = $XP(options,'category');
	var lengendCfgs = d3.values(category);
	var align = $XP(options,'align','right-top').split('-'),
		x = align[0],
		y = align[1];
	var renderer = $XP(options,'renderer');
	var colorScale = d3.scale.category10();
	var legendColor = {};
	var legendG = gEl.append('g').attr('class','legends');
	var initFlag = false;
	//设置图例组的x||y 轴的偏移
	var w = 0,h = 0;	//lengedG的宽高
	function setLegendAlign(){
		var offsetX = 0;
		var offsetY = 0;
		switch(x){
			case 'left':
				offsetX = 0;
				break;
			case 'right':
				offsetX = rect[0] - w;
				break;
			case 'middle':
				offsetX = (rect[0] - w)/2;
				break;
		}
		switch(y){
			case 'top':
				offsetY = -h;
				break;
			case 'bottom':
				offsetY = rect[1] + h;
				break;
			case 'middle':
				offsetY = (rect[1] - h)/2;
				break;
		}
		(initFlag ? legendG.transition().duration(1000) : legendG)
			.attr('transform','translate('+ offsetX +','+offsetY+')');
	}
	//渲染图例图形，默认10*10矩形
	function drawFigure(figureEl){
		var color = null;
		function getFillColor(d,idx){
			if(d.legendColor)
				color = d.legendColor;
			else if(d.seriesFill)
				color = d.seriesFill;
			else 
				color = colorScale(idx);
			legendColor[d.name] = color;
			return color;
		}
		d3.select(figureEl).append('rect')
			.attr('width',legendSize)
			.attr('height',legendSize)
			.style('fill',function(d,idx){return getFillColor(d,idx);});
	}
	//渲染图例与文字，如果传入了renderer自定义绘制函数，则执行自定义绘制函数
	function _render(){
		var legendEl = legendG.selectAll('legend')
					.data(lengendCfgs).enter()
					.append('g');
		legendEl.append('g')
			.attr('class','figure')
			.each(function(d){
				IX.isFn($XP(d,'renderer')) ? d.renderer() : drawFigure(this);
			});
		legendEl.append('text')
			.text(function(d){return d.text;})
			.attr('x',function(){
				return this.previousSibling.getBBox().width + textRectGap;
			})
			.attr('y',function(){
				return this.previousSibling.getBBox().height;
			});
		var legendElWidth = [];
		legendEl.each(function(d,i){
			legendElWidth.push(parseInt(this.getBBox().width) + parseInt(legendSpacing));
			var transX = i === 0 ? 0 : d3.sum(legendElWidth.slice(0,i));
			d3.select(this).attr('transform','translate('+ transX +',0)');
		});
		w = legendG.node(0).getBBox().width;
		h = legendG.node(0).getBBox().height + 6;
		setLegendAlign();
		initFlag = true;
	}
	function _refresh(lengendData){
		lengendCfgs = lengendData;
	}
	return {
		resize : function(_rect){
			rect = _rect;
			initFlag ?　setLegendAlign() : _render();
		},
		refresh : _refresh,
		getLegendColor : function(){
			return legendColor;
		},
	};
}

function BaseChart(gEl,rect,options,DataModel){
	var type = $XP(options,'type');
	var xOpts = $XP(options,'xAxis');
	var yOpts = $XP(options,'yAxis');
	var category = $XP(options,'category');
	var isShowLegend = $XP(options,'isShowLegend',false);

	var names = d3.keys(category);
	var dataModel = new DataModel(names,{
		xFormatter: $XP(xOpts,'formatter'),
		xKey: $XP(xOpts,'key'),
		dataType: $XP(xOpts,'dataType'),
		iTicks: $XP(yOpts,'iTicks',5)
	});
	var chartData = null;
	var xAxis = new BaseAxis(gEl,rect,xOpts);
	var yAxis = new BaseAxis(gEl,rect,yOpts);
	var legend = new Legend(gEl,rect,IX.inherit($XP(options,'legend'),{category : category}));
	return {
		resize : function(rect){
			xAxis.resize(rect);
			yAxis.resize(rect);
			if(isShowLegend){
				legend.resize(rect);
			}
		},
		refresh : function(data,lengendData){
			chartData = dataModel.getData(data);
			xAxis.refresh(chartData.xValues);
			yAxis.refresh(chartData.yValues);
			if(isShowLegend){
				legend.refresh(lengendData);
			}
		},
		getSeries : function(){
			return chartData.series;
		},
		getXAxis : function(){
			return xAxis;
		},
		getYAxis : function(){
			return yAxis;
		}
	};
}
function LineChart(gEl,rect,options,DataModel){
	var type = $XP(options,'type');
	var baseChart = new BaseChart(gEl,rect,options,DataModel);
	var category = $XP(options,'category');
	var names = d3.keys(category);
	var gLineArea = gEl.append('g').classed('areaLine',true);
	var linePath = null,areaPath = null;
	var xAxis = null,yAxis = null;
	var series = [];
	var initFlag = false;
	var markLineEl = null;
	var tips = $XP(options,'tips');
	//genPath 通过xAxis和yAxis的getPos获得的坐标，初始化折线函数，区域函数
	function genPath(cbFn){
		linePath = d3.svg.line()
			.x(function(d,idx){return xAxis.getPos(idx);})
			.y(function(d){return yAxis.getPos(d.num);});
		areaPath = d3.svg.area()
			.x(function(d,idx){return xAxis.getPos(idx);})
			.y0(rect[1])
			.y1(function(d){ return yAxis.getPos(d.num);});
		if(cbFn) cbFn();
		//if(tips) bindLineChartEvent(gEl,rect,tips,xAxis,yAxis,series);
	}
	//渲染折线
	function renderLine(){
		function strokeColor(d){
			var strokeStr = $XP(category[d.category],'legendColor');
			return strokeStr ? strokeStr : $XP(category[d.category],'seriesFill');
		}
		function createPath(values){
			return linePath(IX.map(values,function(item){
				//return {time : item.time,category : item.category,num :0};
				return {time : item.time,category : item.category,num :item.num};
			}));
		}
		gLineArea.selectAll('.line')
			.data(series).enter()
			.append('path')
			.attr('d',function(d){ 
				return createPath(d.values);
			})
			.style('fill','none')
			.style('stroke-width',3)
			.style('stroke',function(d){
				return strokeColor(d);
			});
			/*.transition()
			.duration(800).ease('linear')
			.attr('d', function(d){ return linePath(d['values']);});*/
	}
	//渲染区域图
	function renderArea(){
		function createArea(values){
			return areaPath(IX.map(values,function(item){
				//return {time : item.time,category : item.category,num :0};
				return {time : item.time,category : item.category,num :item.num};
			}));
		}
		function fillColor(d){
			var fillStr = $XP(category[d.category],'seriesFill');
			return fillStr ? fillStr : $XP(category[d.category],'legendColor');
		}
		gLineArea.selectAll('.area')
			.data(series).enter().append('path')
			.attr('class',function(d){
				//var hidden = d.category == 'baseData' ? '' : ' hidden';
				return 'area ' + d.category;// + hidden;
			})
			.attr('d', function(d) {return createArea(d.values);})
			.style('fill',function(d){return fillColor(d);});
			/*.transition()
			.duration(800).ease('linear')
			.attr('d',function(d){
				return areaPath(d['values']);
			});*/
	}
	//渲染标记线
	function renderMarkLine(){
		markLineEl = gEl.append('rect')
			.attr('class','markLine hidden')
			.attr('width',1)
			.attr('height',rect[1]<0?0:rect[1]);
	}
	//渲染标记
	function renderSymbol(){
		var symbolEl = gEl.append('g').classed('symbols',true);
		var wrapper = symbolEl.selectAll('wrapper')
				.data(series).enter()
				.append('g')
				.attr('class',function(d){
					return 'wrapper ' + d.category;
				});

		wrapper.each(function(d){
			d3.select(this).selectAll('circle')
				.data(d.values).enter()
				.append('rect')
				.attr('x',function(d,idx) { 
					return xAxis.getPos(idx) - 7; 
				})
				.attr('y',function(d) { 
					return yAxis.getPos(d.num) - 7; 
				})
				.attr('width',function(d){
					return 14;
				})
				.attr('height',function(d){
					return 14;
				})
				.style('fill', function(d){
					return "#e85298";
					//return $XP(category[d.category],'legendColor');
				})
				.style('stroke-width',function(d){
					return 1.5; //d.isMaxFlag ? 3 : 2;
				})
				.style('stroke',function(d){
					//return $XP(category[d.category],"rgba(255,255,255,1)");
				});
		});
	}
	function init(){
		genPath();
		switch(type){
			case 'line':
				renderLine();
				break;
			case 'area':
				renderArea();
				break;
			default:
				renderLine();
				renderArea();
				break;
		}
		renderSymbol();
		renderMarkLine();
		if(tips) bindLineChartEvent();
		initFlag = true;
	}
	function _resize(){
		genPath();
		var animate = gEl.transition().duration(1000);
		animate.selectAll('.areaLine .line').attr('d', function(d) {
			return linePath(d['values']); 
		});
		animate.selectAll('.areaLine .area').attr('d', function(d) {
			return areaPath(d['values']); 
		});
		animate.selectAll('.symbols .wrapper').each(function(d){
			d3.select(this).selectAll('circle')
				.transition().duration(1000)
				.attr('cx', function(d,idx) { return xAxis.getPos(idx); })
				.attr('cy',function(d) { return  yAxis.getPos(d.num)-2; });
		});
		gEl.select('.markLine').attr('height',rect[1]<0?0:rect[1]);
	}

	/* bindLineChartEvent 鼠标在图形区域上移动时的交互,该函数在折线图或区域图绘制完成之后，通过回调开始执行。*/
	function bindLineChartEvent(){
		var symbolWrapperEl = gEl.select('.symbols').selectAll('.wrapper');
		function getData(index){
			return IX.map(series,function(item){
				for(var i = 0;i<item.values.length;i++){
					if(index == i){
						return item.values[i];
					}
				}
			});
		}
		//初始化刻度位置，及数据
		var ticksData = [];
		gEl.select('.x-axis').selectAll('.tick').each(function(d,idx){
			var posX = xAxis.getPos(idx);
			ticksData.push({
				posX: posX,
				data: getData(idx)
			});
		});
		/**mouseover
			1.以所有的刻度位置ticksData为基础与鼠标移入的位置进行对比，得到距离最短的点，
			2.通过步骤1,得到的id及数据
			3.如果用户传入了tips对象，显示toolTips
		  *mouseout 鼠标移出图形区域的交互
		    1.隐藏markLine
		    2.隐藏symbol
		    3.隐藏tooltips*/
		function mouseMoveFn(mousePos){
			var minX = 100000,minY = 100000;
			var id = null;
			var linePosX = null,posY = null;
			IX.iterate(ticksData,function(item,index){
				var dx = Math.abs(mousePos[0]  - item.posX );
				if( dx < minX){
					minX = dx;
					linePosX = xAxis.getPos(index);
					id = index;
				}
			});

			markLineEl.attr({x : linePosX}).classed('hidden', false);

			symbolWrapperEl.each(function(){
				d3.select(this).selectAll('rect').each(function(d,idx){
					if(id == idx){
						d3.select(this).attr({stroke:"#fff"});
						posY = Math.round(this.getBBox().y);
					}else{
						d3.select(this).attr({stroke:""});
					}
				});
			});
			tips.show(linePosX,posY,ticksData[id].data,rect[1]);
		}
		gEl.on({
			mousemove:function(){
				mouseMoveFn(d3.mouse(this));
			},
			mouseout: function(){
				markLineEl.classed('hidden', true);
				symbolWrapperEl.selectAll('rect').attr("stroke","");
				tips.hide();
			}
		});
	}

	return {
		resize : function(_rect){
			rect = _rect;
			baseChart.resize(rect);
			if(initFlag)	_resize();
		},
		refresh : function(data){
			baseChart.refresh(data);
			series = IX.map(baseChart.getSeries(),function(d){
				return IX.extend(d,category[d.category]);
			});
			xAxis = baseChart.getXAxis();
			yAxis = baseChart.getYAxis();
			init();
		},
		switchShowFn: function(name,checked){
			if($XP(options,'switchShowFn')){
				$XP(options,'switchShowFn')(gEl,name,checked);
			}
		}
	};
}

function ColumnChart(gEl,rect,options){
	var category = $XP(options,'category');
	var names = d3.keys(category);
	var rectScale = d3.scale.ordinal().domain(names);
	var rangeBand = 0;
	var xAxis = null,yAxis = null;	//x轴，y轴
	var series = [];
	var rectGap = 2;		//柱形间隔
	var rectWidth = 16;		//柱形宽
	var initFlag = false;	//是否进行初始化
	var tips = $XP(options,'tips');		//提示框
	
	function bindBarChartEvent(){
		function hoverRect(targetEl,event){
			var animate = d3.select(targetEl).transition().duration(500);
			if(event.type == "mouseenter"){
				animate.selectAll(".rectGroup rect").each(function(d,idx){
					d3.select(this).attr("fill",category[d.category].legendColor);
				});
				animate.select(".wrapperBg").attr("fill","rgba(255,255,255,.1)");
				tips.show(xAxis.getPos($XH.getIndex(targetEl)),rect[1],d3.select(targetEl).data()[0].values);
			}else{
				animate.select(".wrapperBg").attr("fill","rgba(255,255,255,0)");
				animate.selectAll(".rectGroup rect").each(function(d,idx){
					d3.select(this)
						.attr("fill",category[d.category].seriesFill);
				});
				tips.hide();
			}
		}
		gEl.selectAll(".rects .wrapper").on({
			mouseenter : function(d,ev){
				hoverRect(this,d3.event);
			},
			mouseleave : function(){
				hoverRect(this,d3.event);
			}
		});
	}

	var baseChart = new BaseChart(gEl,rect,options,nsD3Lib.getBarChartData);

	function getRectWidth(){
		var perWidth = rectScale.rangeBand() - rectGap;
		return perWidth > rectWidth ? rectWidth : perWidth;
	}
	function getRectHeight(num){
		var h = rect[1] - yAxis.getPos(num);
		return h < 0 ? 0 : h;
	}
	function getFillColor(d){
		var fillStr = $XP(category[d.category],'seriesFill');
		return fillStr ? fillStr : $XP(category[d.category],'legendColor');
	}
	function _render(){
		var rectsG = gEl.append('g').classed('rects',true).attr('clip-path','url(#clipRect)');
		var wapperEl = rectsG.selectAll('.wrapper')
					.data(series).enter().append('g').classed('wrapper',true)
					.attr('transform', function(d,idx) {
						return 'translate(' + xAxis.getPos(idx) + ',0)';
					});
		wapperEl.append('rect')
			.classed('wrapperBg',true)
			.attr('x',0).attr('y',0)
			.attr('width',rangeBand).attr('height',rect[1])
			.attr('fill','rgba(255,255,255,0)');
		
		var groupG  = wapperEl.append('g').classed('rectGroup',true);

		groupG.selectAll('rect')
			.data(function(d){return d.values;}).enter()
			.append('rect')
			.attr('x',function(d,idx){return rectScale(d.category);})
			.attr('y',rect[1])
			.attr('width',getRectWidth())
			.attr('height',0)
			.attr('fill',function(d){return getFillColor(d);})
			.transition().duration(800)
			.attr('y',function(d){return yAxis.getPos(d.num);})
			.attr('height',function(d){return getRectHeight(d.num);});
		initFlag = true;
		if(tips)	bindBarChartEvent();
	}
	function _resize(){
		var animate = gEl.transition().duration(1000);
		animate.selectAll('.rects .wrapper')
			.attr('transform', function(d,idx) {
				return 'translate(' + xAxis.getPos(idx) + ',0)';
			});
		animate.selectAll('.rectGroup rect')
			.attr('x',function(d,idx){return rectScale(d.category);})
			.attr('y',function(d){return yAxis.getPos(d.num);})
			.attr('width',getRectWidth())
			.attr('height',function(d){return getRectHeight(d.num);});
		animate.selectAll('.wrapperBg')
			.attr('x',0).attr('y',0)
			.attr('width',rangeBand).attr('height',rect[1]);
	}
	return {
		resize : function(_rect){
			rect = _rect;
			baseChart.resize(rect);
			if(initFlag)	{
				rangeBand = xAxis.getRangeBand();
				rectScale.rangeRoundBands([0,rangeBand],0.1,1);
				_resize();
			}
		},
		refresh : function(data){
			baseChart.refresh(data);
			series = baseChart.getSeries();
			xAxis = baseChart.getXAxis();
			yAxis = baseChart.getYAxis();
			rangeBand = xAxis.getRangeBand();
			rectScale.rangeRoundBands([0,rangeBand],0.1,1);
			_render();
		}
	};
}
function BarChart(){


}
function MixChart(gEl,rect,options){
	return {resize:function(){},refresh:function(){}};
}
/**
 * [showAxisGraph 渲染带主标轴的图表]
 *  svgEl	svg元素
 * 	rect 	[width,height]
 *  cfg     {配置项}:
	type : 'line-area', //图表类型(2种)
			//1.柱状图'column'（纵向） || 'bar' （横向）；
			//2.折线图 'line'（折线） || 'area' （区域） || 'line-area' （折线+区域）  
			//default:'line-area'
	padding : [],    //[top,right,bottom,left]，图表区域边空，刻度文字不计入,default:[40,30,20,50]
	xAxis :{
		type : 'x', //轴类型,dafult : 'x'
		valueType : 'enum',  //刻度值类型,int整型，enum枚举型 default:int
		tickMarkPlacement : 'on'   //刻度文字与刻度线的对齐方式，on(与刻度线对齐)/between(两个刻度中间);default:on
		tickPadding : 10,       //刻度文字与轴之间的距离，default:10
		showGridLine : true,	//是否显示网格线 default : true
		showAxisLine : true     //是否显示轴线 default : true
	}
	yAxis : {//参考x轴},
 	legend : {  // 如果没有提供，则认为不需要图例
		align : //optional,默认top-right，可选值top-left,top,bottom-left,bottom,bottom-right等;
 		renderer : function(gEl){} //自定义绘制图例的样式,如果没有，调用缺省图例
 	},	
 	tips : {    // 如果没有提供，则认为不需要信息提示
		show : function(x,y,item),
		hide : function()
 	}，
	category : {
		'categoryName' : {	name : 'in', text: '本地', 
			color:'#777', fill: 'rgba(1,2,2,0.4)',// color/fill如不提供，则认为不需要调用属性设置。
			type : //表现类型，缺省为：折线图line，可以是line,lineArea及area, 柱形图column
		}
	}
 * @return {
		resize : function(w,h){}
		refresh : function(data){
			//data结构如下:
			//[{categoryName1:100,categoryName2:200,time:'yyyy-mm-dd'},{categoryName1:100,categoryName2:200,time:'yyyy-mm-dd'}.......]
		}
 	}
*/
var defaultCfgs = {
	/*type : 'line-area',*/
	padding : [40,30,20,50],
	xAxis : {
		type : 'x',
		valueType : 'enum',
		tickMarkPlacement : 'on',
		showGridLine : true,
		showAxisLine : true
	},
	yAxis : {
		type : 'y',
		valueType : 'int',
		tickMarkPlacement : 'on',
		showGridLine : true,
		showAxisLine : false,
		iTicks : 5
	},
	legend : {
		align : 'right-top',
	}
};
nsD3.showAxisGraph = function(svgEl,rect,cfg,DataModel){
	var padding = $XP(cfg,'padding');
	var rangeW = rect[0] - padding[1] - padding[3] ;
	var rangeH = rect[1] - padding[0] - padding[2];
	var options = jQuery.extend(true,{},defaultCfgs,cfg);
	var chart = null;
	var gEl = svgEl.append('g').attr('transform','translate('+padding[3]+','+padding[1]+')');
	
	switch($XP(options,'type',null)){
		case 'line':
		case 'area':
		case 'line-area':
			chart = new LineChart(gEl,[rangeW,rangeH],options,DataModel);
			break;
		case 'column':
			chart = new ColumnChart(gEl,[rangeW,rangeH],options);
			break;
		case 'bar':
			chart = new BarChart(gEl,[rangeW,rangeH],options);
			break;
		case null:
			chart = new MixChart(gEl,[rangeW,rangeH],options);
	}
	return {
		resize : function(w,h){
			rangeW = w - padding[1] - padding[3];
			rangeH = h - padding[0] - padding[2];
			chart.resize([rangeW,rangeH]);
		},
		refresh : function(data){
			chart.refresh(data);	
		},
		switchShowFn: function(name,checked){
			chart.switchShowFn(name,checked);
		}
	};
};

})();
(function(){
var nsD3 = IXW.ns('D3');
// 背景
function drawBgs(gEl,arrBg){
	var bgEls = gEl.append("g").attr("class","bgs");
	IX.map(arrBg,function(item){
		bgEls.append("circle")
			.attr("cx",0)
			.attr("cy",0)
			.attr("r",item.r)
			.style("fill",item.fill)
			.style("stroke",item.stroke)
			.style("stroke-width",item.strokeWidth);
	});
}

// 弧 
function drawArc(gEl,cfg,data){
	var arcEl = gEl.append("g").attr("class","arc");
	var radius = cfg.r + (cfg.strokeWidth/2);  //半径
	var perimeter = 2*Math.PI*radius;  //周长
	var strokeDasharray = [perimeter*(data/100),perimeter+1].join(" ");  //（路径动画）虚线描边 "线段长度 线段间长度"
	arcEl.append("circle")
		.attr("class","animate-arc")
		.attr("cx",0)
		.attr("cy",0)
		.attr("r",radius)
		.style("stroke",cfg.fillUrl ? cfg.fillUrl : cfg.stroke)
		.attr("stroke-dasharray","0 "+ (perimeter+1))
		.attr("transform","rotate(-90)")
		.style("stroke-width",cfg.strokeWidth)
		.style("stroke-linecap",cfg.strokeLinecap)
		.style("fill","none");
	arcEl.select(".animate-arc")
		.transition()
		.duration(1000)
		.attr("stroke-dasharray",strokeDasharray);
}
function drawBall(gEl,cfg,data){
	var ballEl = gEl.append("g").attr("class","ball");
	var radius = cfg.r + (cfg.strokeWidth/2);  //半径
	var perimeter = 2*Math.PI*radius;  //周长
	var strokeDasharray = [perimeter*(data/100),perimeter+1].join(" ");  //（路径动画）虚线描边 "线段长度 线段间长度"
	ballEl.append("circle")
		.attr("class","animate-ball")
		.attr("cx",0)
		.attr("cy",0)
		.attr("r",radius)
		.attr("stroke-dasharray","2.5 "+ (perimeter+1))
		.attr("stroke-dashoffset",0)
		.attr("transform","rotate(-90)")
		.style("stroke",cfg.stroke)
		.style("stroke-width",cfg.strokeWidth)
		.style("stroke-linecap","round")
		.style("fill","none");
	ballEl.select(".animate-ball")
		.transition()
		.duration(1000)
		.attr("stroke-dashoffset",-perimeter*(data/100)+2);
}
function drawText(gEl,cfg){
	var textEl = gEl.append("g").attr("class",cfg.clz);
	textEl.append("text")
		.text(cfg.text)
		.style("font-size",cfg.fontSize)
		.attr("x",cfg.offsetX)
		.attr("y",cfg.offsetY)
		.style("font-family",cfg.fontFamily)
		.style("font-weight",cfg.fontWeight)
		.style("fill",cfg.fill);

	if("underline" in cfg){
		var underLineCfg = $XP(cfg,"underline");
		textEl.append("rect")
			.attr("width",underLineCfg.width)
			.attr("height",underLineCfg.height)
			.attr("x",underLineCfg.offsetX)
			.attr("y",underLineCfg.offsetY)
			.style("fill",underLineCfg.fill);
	}
}            
function renderTexts(gEl,cfg,percent){
	var numCfg = cfg.num, 
		nameCfg = cfg.desc;
	drawText(gEl,IX.inherit(numCfg,{
		clz: 'percent',
		text: percent +"%"
	}));
	drawText(gEl,IX.inherit(nameCfg,{
		clz: 'text',
		text: cfg.name
	}));
}

function drawRanking(gEl,cfg,data){
	var rankingEl = gEl.append("g")
		.attr("class","ranking")
		.attr("transform",function(){
			var offset = [cfg.offsetX,cfg.offsetY].join(",");
			return "translate("+offset+")";
		});
	rankingEl.append("image")
		.attr("x",0)
		.attr("y",0)
		.attr("width",cfg.width)
		.attr("height",cfg.height)
		.attr("xlink:href",cfg.url);

	rankingEl.append("text")
		.text("NO." + data)
		.attr("x",26)
		.attr("y",-10)
		.attr("font-size",cfg.fontSize)
		.attr("font-family", cfg.fontFamily)
		.style("fill",cfg.fill);
}

nsD3.showPieGraph = function(svg,options,data){
	var maxRadius = $XP(options,"maxRadius");
	var margin = $XP(options,"margin");
	var cx =  maxRadius + margin[1],
		cy = maxRadius + margin[0];
	
	var gEl = svg.append("g") 
		.attr("class","wrapper")
		.attr("transform",'translate('+cx+','+cy+')');

	drawBgs(gEl,$XP(options,"bgRadius"));
	drawArc(gEl,$XP(options,"arc"),data.percent);
	renderTexts(gEl,IX.inherit(options.text,{
		name: $XP(options,"name")
	}),data.percent);
	if($XP(options,"ball")){
		drawBall(gEl,$XP(options,"ball"),data.percent);
	}
	if($XP(options,"ranking")){
		drawRanking(gEl,$XP(options,"ranking"),data.ranking);
	}
};
})();
(function(){
var nsD3Lib = IXW.ns('D3Lib');
function DataModel(category,options){
	var xValues = [],yMax = 0,yMin = 0;
	var xKey = $XP(options,'xKey','time');
	var xFormatter = $XP(options,'xFormatter') || d3.time.format("%m/%d");
	var iTicks = $XP(options,'iTicks') || 5;
	function _getYValues(){
		var perTick = IX.Math.formatMaxValue(yMax,iTicks)/iTicks;
		return  IX.map(d3.range(iTicks+1),function(item,idx){
			return perTick*idx;
		}).reverse();
	}
	function _getLineSeries(data){
		return IX.map(category,function(name,idx){
			return {
				category : name,
				values : IX.map(data,function(d){
					var time = xFormatter(new Date(d[xKey]));
					if(idx === 0)
						xValues.push(time);
					if(d.num > yMax)
						yMax = d.num;
					if(d.num < yMin)
						yMin = d.num;
					return {'category':name,'time':time,'num': d.num};
				})
			};
		});
	}
	return {
		getYValues : _getYValues,
		getXValues : function(){return xValues;},
		getLineSeries : _getLineSeries
	};
}
nsD3Lib.getTrafficChartData  = function(category,options){
	var model = new DataModel(category,options);
	return {
		getData : function(data){
			return {
				series : model.getLineSeries(data),
				yValues : model.getYValues(),
				xValues : model.getXValues()
			};
		}
	};
};
})();
(function(){
var nsLib = IXW.ns("Lib");
var nsGlobal = IXW.ns("Global");
var ixwD3 = IXW.LibD3;
var nsD3 = IXW.ns('D3');
var nsD3Lib = IXW.ns('D3Lib');

var category = {
	traffic : {
		name: "traffic", 
		text: '',
		seriesFill: "rgba(255,67,299,0.15)",
		legendColor: "#e85298",
	}
};

var graphCfgs = {
	padding: [30,20,10,65],
	type: 'line-area',
	tips: {
		show: function (x,y,tipsData,svgH){
			nsLib.showToolTips(containerEl,{
				left: x+20,
				top: -(svgH-y+70),
				width: 90,
				height: 50
			},{
				clz: 'traffic-data-tooltip',
				list: IX.map(tipsData,function(item){
					return {text:"",num: nsLib.changeNumSegWithComma(item.num)};
				})
			});
		},
		hide: function(){
			nsLib.hideToolTips();
		}
	},
	category: category,
};
var graphView = null;
var svgEl = null;
var containerEl = null;
nsLib.trafficGraph = function(el){
	containerEl = el;
	var rect = $XH.getPosition(el);
	if(d3.select(el).select("svg").empty()){
		svgEl = d3.select(el).append('svg')
					.attr({width:'100%',height:'100%'});
	}else{
		svgEl.selectAll("g").remove();
	}
	return {
		resize: function(){

		},
		refresh: function(type,data){
			var xFormatter = null;
			switch(type){
				case 'hour':
					xFormatter = d3.time.format("%H");
					break;
				case 'month':
				case 'week':
					xFormatter = d3.time.format("%m/%d");
					break;
			}
			var options = IX.inherit(graphCfgs,{
				xAxis: {
					formatter: xFormatter,
					key: 'time',
					dataType: type,
					showGridLine: false
				},
				yAxis: {
				 	showAxisLine: true
				}
			});
			graphView = new nsD3.showAxisGraph(
				svgEl,
				[rect[2],rect[3]],
				options,
				nsD3Lib.getTrafficChartData
			);
			graphView.resize(rect[2],rect[3]);
			graphView.refresh(data);
		}
	};
};

})();
(function () {var t_tooltips = new IX.ITemplate({tpl: [
	'<div class="tooltips {clz}">',
		'<ul class="tip">',
			'<div class="total {hidden}">{total}</div>',
			'<tpl id="tiplist">',
				'<li>',
					'<span class="txt">{text}</span>',
					'<span>{num}</span>',
				'</li>',
			'</tpl>',
		'</ul>',
		'<div id="triangle" class="triangle"></div>',
	'</div>',
'']});

var nsLib = IXW.ns("Lib");

var _panel = new IXW.Lib.PopPanel({
	id : "toolTips",
	position : "offset"
});
/*
	data:[{
		text:...
		num:...
	},....}
 */
nsLib.showToolTips  = function(container, rect, data){
	var bodyEl = _panel.getBodyContainer();
	bodyEl.innerHTML = t_tooltips.renderData("",{
		clz: data.clz,
		total: data.total ? data.total : "",
		hiddenL: data.total ? "hidden" : "",
		tiplist: data.list
	});
	_panel.reset({
		offset : rect,
		trigger : container
	});
};
nsLib.hideToolTips = function(){_panel.hide();};
})();
(function () {var t_statistic = new IX.ITemplate({tpl: [
	'<div class="tit">设备总量</div>',
	'<div class="cont">',
		'<div class="total">',
			'<span class="text-shadow">{total}</span>',
			'<span>{total}</span>',
		'</div>',
		'<div class="classify">',
			'<span>',
				'<span class="name">摄像机</span>',
				'<span class="num">{camera}</span>',
			'</span>',
			'<i class="sep"></i>',
			'<span>',
				'<span class="name">卡口</span>',
				'<span class="num">{iod}</span>',
			'</span>',
		'</div>',
	'</div>',
'']});

var nsPanel = IXW.ns("Panel");
var nsLib = IXW.ns("Lib");
nsPanel.DeviceStatistic = function(container,cfg){
	return  {
		getTabs: function(){ return []; },
		getHTML : function(){ 
			return t_statistic.renderData("",{
				total:0,
				iod:0,
				camera:0
			});
		},
		switchTab :function(tabName){ },
		refresh: function(data){
			IX.extend(data,{total: nsLib.changeNumSegWithComma(data.total)});
			jQuery(container).find(".device-statistic")
				.html(t_statistic.renderData("",data));
		}
	};
};
})();
(function () {
var nsPanel = IXW.ns("Panel");
var nsGlobal = IXW.ns("Global");
var getCubeImageUrl = nsGlobal.getCubeImageUrl;
var nsD3 = IXW.LibD3;
var nsLib = IXW.ns("Lib");

function PolygonSchemes(base,hover){
	var PolygonSchemeNamePrefix = "image-cube4";
	var CubePolygon = [ //缺省立方体的底面顶点坐标
		[0,11], // point 0
		[18,0], // point 1
		[40,13],// point 2
		[22, 24]// point 3
	];
	var BaseRect = [40, 24];//底面图片宽高
	var SideRect = [23, 200]; //侧边图片宽高
	var scheme = {
		"f-top" : base.top,
		"f-side" : base.side,
		"f-side-0-1" : "",
		"f-side-1-2" : "",
		"f-bot" : base.bot
	};
	var hoverScheme = {
		"f-top" : hover.top,
		"f-side" : hover.side,
		"f-side-0-1" : "",
		"f-side-1-2" : "",
		"f-bot" : hover.bot
	};

	function getSchemeByName(_schemes, name){
		var arr = name.split("-"), _name = name;
		while(arr.length>=1){
			if (_name in _schemes) return _schemes[_name];
			arr.pop();
			 _name = arr.join("-");
		}
		return "";
	}
	return {
		magicNumber : 1.02,
		polygon : CubePolygon,
		baseRect : BaseRect,
		sideRect : SideRect,
		getSchemeByName : function(segIdx, name){
			return getSchemeByName(scheme, name);
		},
		getHoverSchemeByName : function(name){
			return getSchemeByName(hoverScheme, name);
		}
	};
}
var greenSchemes = new PolygonSchemes({
	top : getCubeImageUrl("cube-green-top"),
	bot : getCubeImageUrl("cube-green-bot"),
	side : getCubeImageUrl("cube-green-side")
},{
	top : getCubeImageUrl("cube-green-top-hover"),
	bot : getCubeImageUrl("cube-green-bot-hover"),
	side : getCubeImageUrl("cube-green-side-hover")
});
var greenSchemes2 = new PolygonSchemes({
	top : getCubeImageUrl("cube-blue-top"),
	bot : getCubeImageUrl("cube-blue-bot"),
	side : getCubeImageUrl("cube-blue-side")
},{
	top : getCubeImageUrl("cube-green-top-hover"),
	bot : getCubeImageUrl("cube-green-bot-hover"),
	side : getCubeImageUrl("cube-green-side-hover")
});

function graphClz(svg){
	function drawAVG(rect,dataObj){
		var avgEl = svg.append("g").classed("avg",true);
		avgEl.append("line").attr({
			x1: 0,
			y1: rect[3]/2-30,
			x2: rect[2],
			y2: rect[3]/2-30,
			"stroke-dasharray" : "20 20",
			stroke: "rgba(19,230,255,.5)",
			"stroke-width" : "2"
		});
		avgEl.append("circle").classed("capLeft",true)
			.attr({
				cx: 4,
				cy: rect[3]/2-30,
				r: 4,
				fill: "rgba(19,230,255,1)"
			});
		avgEl.append("path")
			.classed("capRight",true)
			.attr("d",function(){
				return "M 0,0 L 16,6 L 0,12 A 7.460922530479977 7.460922530479977,0 0,0,0 0 Z";
			})
			.attr("fill","rgba(19,230,255,1)")
			.attr("transform",function(){
				var x = rect[2]-20,
					y = rect[3]/2-36;
				return "translate("+x+","+y+")";
			});
		avgEl.append("text")
			.text(dataObj.avg)
			.attr({
				x: rect[2],
				y: rect[3]/2 - 24,
				fill: "rgba(19,230,255,1)",
				"font-size": 16
			});
	}
	function drawCubes(rect,data,dataObj,tabName){
		var perWidth = rect[2] / data.length ;
		var perCubeWidth = perWidth - 30,
			perHalfWidth = perWidth / 2;
		var maxH = rect[3]-20;
		var max = dataObj.max;

		var cubes = svg.selectAll(".cube").data(data);
		var newCubes = cubes.enter().append("g").attr("class", "cube");

		cubes.each(function(d, idx){
			var gEl = d3.select(this);
			var x = perWidth * idx ;
			var value = d.online + d.offline;
			var valueText = nsLib.changeNumSegWithComma(value);
			var h0 = (max - value) * (maxH - 30) / max; 
			var scheme = tabName == "camera" ? greenSchemes : greenSchemes2;
			var cube = new nsD3.createImgFrustum(gEl, [x + 20, -30, perCubeWidth, maxH], {
				schemes: scheme,
				disableDefaultHover: true,
				max: max,
				value: value
			});
			var tipOption = {
				clz: 'device-tooltip',
				total: valueText,
				list:[
					{text:"在线：",num: nsLib.changeNumSegWithComma(d.online)},
					{text:"离线：",num: nsLib.changeNumSegWithComma(d.offline)}
				]
			};
			gEl.append("text").attr("class", "name")
					.attr("x", x + perHalfWidth + 6)
					.attr("y", maxH)
					.attr("fill","#fff")
					.attr("font-size", 13)
					.text(d.name);
			gEl.append("text").attr("class","number")
					.attr("x", x + perHalfWidth + 6)
					.attr("y", h0 - 40)
					.attr("opacity", 0)
					.attr("fill","#09ba98")
					.attr("font-size",16)
					.attr("font-family","微软雅黑")
					.text(valueText);		
			
			cube.hover(function(el){
				var cubeEl = d3.select(el);
				cubeEl.selectAll("image").each(function(d){
					d3.select(this).attr("xlink:href", scheme.getHoverSchemeByName(d.clz));
				});
				d3.select(el.parentNode).select(".number").attr("opacity", 0);
				nsLib.showToolTips(gEl.node(), {
					left: 0, top: -45, width:120, height:80
				}, tipOption);

			},function(el){
				var cubeEl = d3.select(el);
				cubeEl.selectAll("image").each(function(d){
					d3.select(this).attr("xlink:href", scheme.getSchemeByName(0, d.clz));
				});
				d3.select(el.parentNode).select(".number").attr("opacity", 1);
				nsLib.hideToolTips();
			});
		});

		setTimeout(function(){
			cubes.selectAll(".number").attr("opacity", 1);
			d3.select(".avg-num").classed("hidden",false);
		},2100);
	}
	function refresh(rect,data,dataObj,tabName){
		svg.selectAll("g").remove();
		drawAVG(rect,dataObj); 		//平均线
		drawCubes(rect,data,dataObj,tabName); 	//柱形图
		jQuery(contentEl).parent(".device-list")
			.find(".avg-num").html(nsLib.changeNumSegWithComma(dataObj.avg));
	}
	return {
		resize : function(visibleW, visibleH){
			
		},
		refresh: refresh,
		scale : function(r){}
	};
}

function getData(arr){
	var data = IX.map(arr,function(item){
		return item.online+item.offline;
	});
	return {
		max: Math.ceil(Math.max.apply(null,data)*1.3),
		avg: eval(data.join("+"))
	};
}
var contentEl = null, graph = null, rect = null;
nsPanel.DeviceList = function(container,cfg){
	
	return  {
		getTabs: function(){ 
			return [
				{value:"camera", name: "各区摄像机建设", focused: "focused"},
				{value:"iod", name: "各区卡口建设",focused: ""},
			]; 
		},
		getHTML : function(){ return ""; },
		switchTab :function(tabName){
			nsGlobal.serviceCaller("getDeviceList", {type:tabName}, function(data){
				var dataObj = getData(data);
				graph.refresh(rect,data, dataObj,tabName);
				d3.select(container).select(".avg-num")
						.html(nsLib.changeNumSegWithComma(dataObj.avg));
			});
		},
		refresh: function(data){
			var dataObj = getData(data);
			var wrapperEl = $XH.first(container,cfg.name);

			d3.select(wrapperEl).append("div").attr("class","avg-num")
				.html(nsLib.changeNumSegWithComma(dataObj.avg))
				.classed("hidden",true);
			
			contentEl = $XH.first(wrapperEl,"content");
			rect = $XH.getPosition(contentEl);
			
			if (!graph)
				graph = new nsD3.AreaWrapper(contentEl,graphClz,rect[2],rect[3]);
			graph.refresh(rect,data,dataObj,"camera");
		}
	};
};
})();
(function () {
var nsGlobal = IXW.ns("Global");
var nsPanel = IXW.ns("Panel");
var nsD3 = IXW.ns('D3');
var getPieFillUrl = nsGlobal.getPieFillUrl;
var baseOptions = {
	maxRadius: 120,
	bgRadius: [
		{r:108,fill:"#273148",stroke:""},
		{r:90,fill:"#1d283f",stroke:""},
		{r:82,fill:"rgba(0,0,0,0)",stroke:"#19ffb1"},
		{r:66,fill:"#273148",stroke:""},
	],
	arc: {
		r:86,strokeWidth:30,
		stroke:"rgba(25,255,177,.6)",strokeLinecap:"round",
	},
	ball: {
		r:90,strokeWidth:20,stroke:"#fff"
	},
	text: {
		num:{
			fontSize: 44,
			// fontFamilty: "Impact Regular",
			offsetX: -40,
			offsetY: 0,
			fontWeight: "bold",
			fill:"#19ffb1"
		},
		desc:{
			fontSize: 15,
			fontFamilty: "微软雅黑",
			offsetX: -36,
			offsetY: 30,
			fontWeight: "normal",
			fill:"#19ffb1"
		}
	},
	ranking: {
		width:102,height:21,url: getPieFillUrl("arrow"),
		fontSize:30,fontFamily: "Impact Regular",fill:"#f9c556"
	}
};
function renderPattern(svg){
	var patternEl = svg.append("defs")
		.append("pattern")
		.attr("id","fill-img")
		.attr("width",300)
		.attr("height",300);
	patternEl.append("image")
		.attr("xlink:href",getPieFillUrl("gradient"))
		.attr("x",0)
		.attr("y",0)
		.attr("width",300)
		.attr("height",300);
}


nsPanel.DeviceRank = function(container,cfg){
	return  {
		getTabs: function(){
			return [
				{value:"province-rank", name: "省厅排名", focused: "focused"}, 
			]; 
		},
		getHTML : function(){ return ""; },
		switchTab :function(tabName){ },
		refresh: function(panelData){
			var contentEl = $XH.first($XH.first(container,cfg.name),"content");

			var svg = d3.select(contentEl).append("svg")
						  .attr({width:"100%",height:"100%"});
			renderPattern(svg);  //渲染patterns
			var cfgs = {
				iod: {
					name: '卡口完好率',
					margin: [36,50],
					ranking: {
						offsetX:80,offsetY: -110
					}
				},
				video:{
					name: '视频完好率',
					margin: [36,370],
					ranking: {
						offsetX:80,offsetY: -110
					}
				}
			};
			for(var key in panelData){
				var opts = jQuery.extend(true,{},baseOptions,cfgs[key]);
				nsD3.showPieGraph(svg,opts,panelData[key]);
			}
		}
	};
};
})();
(function () {
var globalActionConfig = IXW.Actions.configActions;
var nsLib = IXW.ns("Lib");
var nsGlobal = IXW.ns("Global");
var dates = [
	{name:"hour",text:"最近24小时",focused:"focused"},
	{name:"week",text:"最近一周",focused:""},
	{name:"month",text:"最近一月",focused:""},
];

var t_trafficData = new IX.ITemplate({tpl: [
	'<div class="filters">',
		'<div class="dates r">','<tpl id="dates">',
			'<a data-href="$nv.data.date.click" class="{focused}" data-key="{name}">{text}</a>',
		'</tpl>','</div>',
	'</div>',
	'<div class="graph"></div>',
'']});

var graphContainer = null;
function _refresh(key){
	var from = new Date();
	var type = key ? key : 'hour';
	var graph = nsLib.trafficGraph(graphContainer);
	nsGlobal.serviceCaller("trafficData", {
		from: from,
		type: type
	}, function(data){
		graph.refresh(type,data);
	});
}
globalActionConfig([["nv.data.date.click", function(params, el){
	jQuery(el).addClass("focused")
			  .siblings().removeClass("focused");
	_refresh(params.key);
}]]);
var nsPanel = IXW.ns("Panel");
nsPanel.TrafficData = function(container,cfg){
	return  {
		getTabs: function(){
			return [
				{value:"traffic-data", name: "车辆通行统计", focused: "focused"}, 
			];
		},
		getHTML : function(){
			return t_trafficData.renderData("",{dates: dates});
		},
		switchTab :function(tabName){ },
		refresh: function(){
			graphContainer = jQuery(container).find("."+cfg.name + " .graph").get(0);
			_refresh();
		}
	};
};
})();
(function () {var t_outside = new IX.ITemplate({tpl: [
	'<div class="cont-left l"></div>',
	'<div class="cont-right r cmap"></div>',
'']});

var nsGlobal = IXW.ns("Global");
var nsD3 = IXW.ns('D3');
var nsLib = IXW.ns("Lib");
var nsPanel = IXW.ns("Panel");
var baseOptions = {
	maxRadius: 46,
	arc: {
		r:32,strokeWidth:10,strokeLinecap:"square"
	},
	text:{
		num: {
			fontSize: 18,
			fontFamilty: "Impact Regular",
			offsetX: -20,
			offsetY: 8,
			fontWeight: "bold",
			fill: "#56e1ed"
		},
		desc:{
			fontSize: 18,
			fontFamilty: "微软雅黑",
			offsetX: -34,
			offsetY: 80,
			fontWeight: "bold",
			fill:"#56e1ed",
		}
	}
};
var cfgs = {
	province: {
		name: '外省占比',
		margin: [75,25], //top,left
		bgRadius: [
			{r:46,fill:"#1d283f",stroke:"#56e1ed",strokeWidth:1},
			{r:38,fill:"#1d283f",stroke:"#273148",strokeWidth:8},
			{r:30,fill:"#1d283f",stroke:"#56e1ed",strokeWidth:2}
		],
		arc:{
			stroke:"#ffca4c"
		},
		text:{
			num: {
				fill: "#56e1ed"
			},
			desc:{
				fill:"#56e1ed",
				underline:{
					width: 100,
					height: 3,
					fill: "#56e1ed",
					offsetX: -46,
					offsetY: 90
				}
			}
		}
	},
	city:{
		name: '外市占比',
		margin: [75,150],
		bgRadius: [
			{r:46,fill:"#1d283f",stroke:"#7e62f7",strokeWidth:1},
			{r:38,fill:"#1d283f",stroke:"#273148",strokeWidth:8},
			{r:30,fill:"#1d283f",stroke:"#7e62f7",strokeWidth:2}
		],
		arc:{
			stroke:"#ff4d77"
		},
		text:{
			num: {
				fill: "#7e62f7"
			},
			desc:{
				fill:"#7e62f7",
				underline:{
					width: 100,
					height: 3,
					fill: "#7e62f7",
					offsetX: -46,
					offsetY: 90
				}
			}
		}
	}
};
function refreshOutside(contentEl,data){
	var svg = d3.select(contentEl).append("svg")
				  .attr({width:"100%",height:"100%"});
	for(var key in data){
		if(key != "total"){
			var opts = jQuery.extend(true,{},baseOptions,cfgs[key]);
			nsD3.showPieGraph(svg,opts,data[key]);
		}else{
			var totalText = svg.append("g")
				.attr("transform","translate(40,30)")
				.attr("class","total")
				.append("text");
			totalText.append("tspan")
				.text("外地车辆总量")
				.style("fill","#fff")
				.style("font-family","微软雅黑")
				.style("font-size",18);
			totalText.append("tspan")
				.text(nsLib.changeNumSegWithComma(data.total))
				.attr("dx",10)
				.attr("dy",3)
				.style("fill","#fff")
				.style("font-family","Impact Regular")
				.style("font-size",24);
		}
	}
}
nsPanel.TrafficOutside = function(container,cfg){
	var leftEl = null;
	return  {
		getTabs: function(){
			return [
				{value:"outside", name: "外地车辆统计", focused: "focused"}, 
			]; 
		},
		getHTML : function(){ 
			return t_outside.renderData(""); 
		},
		switchTab :function(tabName){ },
		refresh: function(){
			if (!leftEl){
				var contentEl = $XH.first($XH.first(container,cfg.name),"content");
				leftEl = $XH.first(contentEl,"cont-left");
				nsPanel.showMapInfo($XH.first(contentEl,"cont-right"));
			}

			nsGlobal.serviceCaller("getOutCar", {}, function(data){
				refreshOutside(leftEl,data);
			});
		}
	};
};
})();
(function () {
var nsGlobal = IXW.ns("Global");
var nsPanel = IXW.ns("Panel");
var nsLib = IXW.ns("Lib");
var globalActionConfig = IXW.Actions.configActions;

var t_trafficStatistic = new IX.ITemplate({tpl: [
	'<div class="types">{typeList}</div>',
	'<div class="filters">',
		'<div class="dates r">','<tpl id="dates">',
			'<a data-href="$nv.statistic.date.click" class="{focused}" data-key="{name}">{text}</a>',
		'</tpl>','</div>',
	'</div>',
'']});

var t_typeList = new IX.ITemplate({tpl: [
	'<ul class="clearfix">','<tpl id="list">',
		'<li class="l">',
			'<div class="desc">',
				'<span class="name">{text}</span>',
				'<span class="num">{num}</span>',
			'</div>',
			'<div class="wrapper">',
				'<div class="stage">',
					'<ul id="img-list">','<tpl id="urls">',
						'<li style="background-image:url({url});"></li>',
					'</tpl>','</ul>',
				'</div>',
			'</div>',
		'</li>','</tpl>',
'</ul>','']});


var module = null,
	interval = 20000,
	paramsTime = 'hour';
var dates = [
	{name:"hour",text:"最近24小时",focused:"focused"},
	{name:"week",text:"最近一周",focused:""},
	{name:"month",text:"最近一月",focused:""},
];
var carTypes = [
	{name: "emphasis", text: "重点车辆"},
	{name: "deck", text: "套牌车辆"},
	{name: "nocturnal", text: "昼伏夜出"}
];

globalActionConfig([["nv.statistic.date.click", function(params, el){
	paramsTime = params.key;
	jQuery(el).addClass("focused").siblings().removeClass("focused");
	module.refresh({from:new Date(),type: paramsTime});
}]]);

function autoPlay(oStageEl){
	if(oStageEl.timer){
		clearInterval(oStageEl.timer);
	}
	var w = oStageEl.width(),h = oStageEl.height();
	var oUl = oStageEl.children("ul");
		oUl.append(oUl.children("li").first().clone());
	var aLis = oUl.children("li");
	var len = aLis.size();	
	oUl.css("height",h*len);
		
	oStageEl.nIndex = 0;
	oStageEl.timer = setInterval(function(){
		oStageEl.nIndex++;
		if(oStageEl.nIndex == len){
			oUl.css("top",-h*1);
			oStageEl.nIndex = 1;
		}else{
			oUl.animate({top:-h*oStageEl.nIndex});
		}
	},1500);
}
function Module(contentEl){
	var wrapperEl = contentEl.find(".types");
	function refresh(params){
		nsGlobal.serviceCaller("getCarList", params, function(data){
			var list = IX.map(carTypes,function(item){
				var d = data[item.name];
				return {
					text: item.text,
					num: d.num,
					urls: d.urls
				};
			});
			wrapperEl.html(t_typeList.renderData("",{list:list}));
			wrapperEl.find(".stage").each(function(idx,el){
				if(jQuery(el).find("li").length>=2){
					autoPlay(jQuery(el));
				}
			});
		});
	}
	return {
		refresh: refresh
	};
}

nsPanel.TrafficStatistic = function(container,cfg){
	return  {
		getTabs: function(){ return []; },
		getHTML: function(){ 
			var list = IX.map(carTypes,function(item){
				return {
					text: item.text,
					num: 0,
					urls: []
				};
			});
			return t_trafficStatistic.renderData("",{
				typeList: t_typeList.renderData("",{list:list}),
				dates: dates
			});
		},
		switchTab :function(tabName){ },
		refresh: function(){
			var contentEl = jQuery(container).find("."+cfg.name).find(".content"); 
			module = new Module(contentEl);
			
			module.refresh({from:new Date(),type:paramsTime});
			
			setInterval(function(){
				module.refresh({from:new Date(),type:paramsTime});
			}, interval);
		}
	};
};
})();
(function () {
var nsLib = IXW.ns("Lib");
var doTransition = nsLib.doTransition;


var t_digits = new IX.ITemplate({tpl: [
	'<div>','<tpl id="items">',
		'<span class="pic-digit idx{idx}" style="margin-top:{top}px;"></span>',
	'</tpl>','</div>',
'']});

var DigitHeight = 52;
var TotalHeight = DigitHeight * 10;
var Interval = 50, Times = 29; // times 最好是质数
function doRoll(items) {
	function resetItems(posFn){
		IX.iterate(items, function(item){
			item.el.style.marginTop = posFn(item) + "px";
		});
	}
	doTransition(Interval, Times, function(times){
		resetItems(function(item){
			var newpos =  (item.spos - Math.floor(item.step * times )) % TotalHeight;
			newpos = newpos > 0 ? (newpos - TotalHeight) : newpos;
			//console.log("marginTop: ", item , times, newpos);
			return  newpos;
		});
	}, function(){
		resetItems(function(item){ return item.epos; });
	});
}
function Digits(_el, num){
	var el = null ;
	var items = IX.Array.init(num, 0);
	var str = items.join("");

	function createRollItem(idx, delta, oldV, newV){
		return {
			el: $XH.first(el, "idx" +idx),
			spos: 0 - oldV * DigitHeight,
			epos: 0 - newV * DigitHeight,
			step: (delta % Times === 0 ? (Times + 2 * idx) : delta) * DigitHeight / Times
		};
	}
	function refresh(value){
		var rollDigits = [], min = num;
		var delta = 0, v = 0;
		var newItems = (str + value);
		newItems = newItems.substring(newItems.length - num).split("");
	
		for (var i = 0; i < num; i++ ){
			v = newItems[i] - 0;
			if (items[i] == v && i < min)
				continue;
			delta = delta * 10 + v - items[i];
			rollDigits.push(createRollItem(i, delta, items[i], v));
			items[i] = v;
			min = Math.min(i, min);
		}
		doRoll(rollDigits);
	}

	_el.innerHTML = t_digits.renderData("", {
		items : IX.map(items, function(item, idx){
			return { top: item };
		})
	});
	el = $XD.first(_el, "div");

	return { refresh: refresh };
}

var t_imgs = new IX.ITemplate({tpl: [
	'<div class="slider">','<tpl id="imgs">',
		'<a id="pic-{type}-{id}" data-href="{href}" data-key="{id}" data-type="{type}">',
			'<img src="{url}" />',
		'</a>',
	'</tpl>','</div>',
'']});


var ReplaceInterval = 100, ReplaceTimes = 23;
function transit4Catched(slideEl, items, numOfVisible){
	var imgIdx = 0;
	var speed = items.length / ReplaceTimes;
	var aEls = [];
	var i = 0, type = items[0].type;

	if (!$X('pic-' + type + "-0" )) {
		for (i=0; i<numOfVisible; i++)
			aEls.push(t_imgs.renderData("imgs", {
				id: i,
				type: type,
				href: "",
				pos:"",
				url: ""
			}));
		slideEl.innerHTML = aEls.join("");
	}
	for (i=0; i<numOfVisible; i++)
		aEls[i] = $X('pic-' + type + "-" + i);

	function showImg(idx){
		var item = items[idx];
		var nidx = idx % numOfVisible;
		var imgEl = $XD.first(aEls[nidx], "img");
		imgEl.src = item.url;
	}
	function showImgs(lastIdx){
		for (var i = Math.max(imgIdx, lastIdx - numOfVisible); i < lastIdx; i++)
			showImg(i);
	}
	showImg(0);
	imgIdx = 1;
	doTransition(ReplaceInterval, ReplaceTimes, function(times){
		var _idx = Math.floor(speed * times);
		showImgs(_idx);
		imgIdx = _idx;
	}, function(){
		showImgs(items.length);
	});
}

var SlideInterval = 60, SlideTimes = 13;
function transit4Matched(slideEl, items, numOfVisible, unitWidth){
	var totalWidth = items.length * unitWidth;
	var speed = totalWidth / SlideInterval;
	slideEl.innerHTML = IX.map(items, function(item){
		return t_imgs.renderData("imgs", item);
	}).join("") + slideEl.innerHTML;
	slideEl.style.marginLeft = 0 - totalWidth + "px";

	doTransition(SlideTimes, SlideInterval, function(times){
		slideEl.style.marginLeft = Math.floor(speed * times) - totalWidth + "px";
	}, function(){
		slideEl.style.marginLeft = 0;

		var aEl = $XD.first(slideEl, "a");
		var n = 1;
		while(aEl){
			var el = $XD.next(aEl, "a");
			if (!el)
				break;
			n ++;
			if (n <= numOfVisible)
				aEl = el;
			else
				el.parentNode.removeChild(el);
		}
	});
}

function ImgSlider(el, type, numOfVisible){
	var isMatched = type.indexOf("matched") >= 0;
	var unitWidth = isMatched ? (type.indexOf("car") >= 0 ? 132 : 79) : 0;
	var slideEl = null;

	function refresh(items){
		var _items = isMatched ? IX.loop(items, [], function(acc, item){
			if (!$X('pic-' + type + '-' + item.id))
				acc.push(item);
			return acc;
		}) : items;
		if (_items.length === 0)
			return;

		(isMatched ? transit4Matched : transit4Catched)(slideEl, IX.map(_items, function(item, idx){
			return IX.inherit(item, {
				type: type
			}, isMatched ? {
				pos: [item.lon, item.lat].join()
			} : {
				id : idx,
				pos: ""
			});
		}), numOfVisible, unitWidth);
	}

	el.innerHTML = t_imgs.renderData("", {
		imgs : []
	});
	slideEl = $XH.first(el, "slider");

	return { refresh: refresh };
}

nsLib.Digits = Digits;
nsLib.ImgSlider = ImgSlider;
})();
(function () {
var nsGlobal = IXW.ns("Global");
var nsPanel = IXW.ns("Panel");
var nsLib = IXW.ns("Lib");


var t_panelWrapper = new IX.ITemplate({tpl: [
	'<div class="pannel {clz}" data-pannel="{name}">',
		'<div class="title">',
			'<span class="tabs">','<tpl id="tabs">',
				'<a data-href="$side.tab.click" class="{focused}" data-key="{value}">{name}</a>',
			'</tpl>','</span>',
			'<a data-href="$side.action.click" class="icon-action" data-key="{name}"></a>',
		'</div>',
		'<div class="content clearfix">{html}</div>',
	'</div>',
'']});

var panelHT = {};
IXW.Actions.configActions([["side.tab.click", function(params, el){
	if ($XH.hasClass(el, "focused"))
		return;
	var panelEl = $XH.ancestor(el, "pannel");
	var panelName = $XD.dataAttr(panelEl, "pannel");
	var panel = panelHT[panelName];
	if (!panel)
		return; 
	
	panel.switchTo(params.key);
	$XH.removeClass($XH.first(el.parentNode, "focused"), "focused");
	$XH.addClass(el, "focused");

}], ["side.action.click", function(params, el){
	var bodyEl = document.body;
	var isMasked = $XH.hasClass(bodyEl, "masked");
	$XH[isMasked ? "removeClass" : "addClass"](bodyEl, "masked");

}]]);

/*function getStyles(rect){
	var styles = [];
	IX.iterate(["height"], function(name, idx){
		var attr = rect[idx];
		if (attr !== null) 
			styles.push(name + ":" + attr +"px");
	});
	return styles.join(";");
}*/
/* panelClz : return instance {
		getTabs(),
		getHTML(),
		switchTab(tabName)
		refresh(panelData)
	}
 */
function PanelWrapper(container, panelClz, cfg){
	var panelName = cfg.name;
	var dataKey = $XP(cfg, "dataKey", panelName);
	var panel = new panelClz(container, cfg);
	return {
		getHTML: function(){
			return t_panelWrapper.renderData("", {
				clz: panelName,
				name: panelName,
				tabs: panel.getTabs(),
				html: panel ? panel.getHTML() : "",
				/*styles: cfg.styles ? getStyles(cfg.styles) : ""*/
			});
		},
		switchTo: function(value){
			if (panel)
				panel.switchTab(value); 	
		},
		refresh: function(data){
			if (panel)
				panel.refresh(data && data[panelName.camelize()]); 	
		}
	};
}

function initPanelGroups(container, panelDefs){
	var panels = IX.map(panelDefs, function(cfg){
		var panelName = cfg.name;
		var clzName = panelName.capitalize().camelize();
		var panel = new PanelWrapper(container, nsPanel[clzName], cfg);
		panelHT[panelName] = panel;
		return IX.inherit(panel, { clz:panelName });
	});

	container.innerHTML = IX.map(panels, function(panel){
		return panel.getHTML();
	}).join("");
	return panels;
}

var PanelDefs = {
	left: [
		{name: "device-statistic", dataKey: "counts", Class: "Test"},
		{name: "device-list", dataKey: "category", Class: "Test"},
		{name: "device-rank", datakey: "rank", Class: "Test"}
	],
	right: [
		{name: "traffic-statistic", Class: "Test"},
		{name: "traffic-outside", Class: "Test"},
		{name: "traffic-data", Class: "Test "}
	]
};

var nsModule = IXW.ns("Sidepage");
nsModule.init = function(pageCfg, pageParams, cbFn){
	var leftEl = $X('lside'),rightEl = $X('rside');
	var leftPanels = initPanelGroups(leftEl,  PanelDefs.left);
	var rightPanels = initPanelGroups(rightEl,  PanelDefs.right);
	
	nsGlobal.serviceCaller("getDeviceInfo", {}, function(data){
		IX.iterate(leftPanels, function(panel){
			panel.refresh(data);
		});
	});
	IX.iterate(rightPanels, function(panel){
		panel.refresh();
	});
};
})();
(function () {
var nsGlobal = IXW.ns("Global");
var nsMapData= IXW.ns("MapData");
var nsLib = IXW.ns("Lib");
var nsD3 = IXW.ns("D3");

var Timer = nsLib.Timer;

var Digits = nsLib.Digits;
var BaseImgSlider = nsLib.ImgSlider;


var t_carPop = new IX.ITemplate({tpl: [
	'<div class="type">{type}</div>',
	'<div class="main">',
		'<div class="title">',
			'<span class="name l">{iod}</span>',
			'<span class="time r">{time}</span>',
		'</div>',
		'<div class="content">',
			'<ul class="img-list l">','<tpl id="imgs">',
				'<li class="l">',
					'<img src="{url}" alt="" style="{style}">',
					'<p class="name">{name}</p>',
				'</li>',
			'</tpl>','</ul>',
			'<ul class="desc-list l">','<tpl id="details">',
				'<li>',
					'<span >{text}：</span>',
					'<span class="{key}">{value}</span>',
				'</li>',
			'</tpl>',
			'</ul>',
			'<div class="percent">{percent}%</div>',
		'</div>',
	'</div>',
	'<a data-href="$pop.close.click" class="btn-close"></a>',
'']});

var AlarmPanelWidth = 390, AlaramPanelHeight = 210;

var carItems = [
	{key: "number",text:"车牌号码"},
	{key: "level",text:"报警级别"},
	{key: "status",text:"报警状态"},
	{key: "site",text:"报警地点"}
];
var faceItems = [
	{key:"name",text:"姓名"},
	{key:"sex",text:"性别"},
	{key:"database",text:"所在库"},
	{key:"idCard",text:"证件号"}
];
function AlarmPanel(el){
	function getPopTplData(type,data){
		IX.extend(data,{percent: Math.round(data.percent)});
		var fields = type == "car" ? carItems : faceItems; 
		var details = IX.map(fields,function(item){
			for(var key in data){
				if(item.key == key){
					IX.extend(item,{value:data[key]});
					if(item.key == "status"){
						IX.extend(item,{value:data[key] == "yes"? "有效": "无效" });
					}
					return item;
				}
			}
		});
		return IX.inherit(data,{
			type: type == "car" ? "车辆布控报警" : "人脸比中",
			imgs: IX.map(data.imgs,function(item){
				return nsLib.handleImg(item,80,100);
			}),
			details: details
		});
	}
	return {
		show: function(item){
			var x = item.xy[0], y = item.xy[1];
			var isTop = true;
			var left = x - AlarmPanelWidth / 2, 
				top = y - AlaramPanelHeight - 30;

			if (top < 0 ) {
				top = y + 30;
				isTop = false;
			}
			
			el.style.left = left + "px";
			el.style.top = top + "px";
			$XH[isTop?"removeClass":"addClass"](el, "topPointer");
			nsGlobal.serviceCaller("getDetailData", {id:item.id,type:item.type}, function(data){
				jQuery(el).html(t_carPop.renderData("",getPopTplData(item.type,data)));
				el.style.display = "block";
			});
			
		},
		hide: function(){
			el.style.display = "none";
		}
	};
}

var CarRecordItems = [
	{text: "今日新增通行记录总数", key: "today"},
	{text: "车辆库", key: "lib"},
	{text: "出租车总数", key: "taxi"},
	{text: "二次识别图片数", key: "pics"},
	{text: "套牌车数", key: "fake"}
], FaceRecordItems = [
	{text: "今日新增人脸数据总数", key: "today"},
	{text: "重点人员库", key: "vip"},
	{text: "人口库", key: "popular"},
	{text: "全国在逃人员库", key: "escaped"},
	{text: "人脸比对", key: "pics"}
];

function getDefaultItem(item){
	return {
		text: item.text,
		value: 0
	};
}

var dateStr = IX.Date.format(new Date()).split(" ");
var DefaultPageData = {
	date: dateStr[0],
	time: dateStr[1],
	total: 0,
	today: 0,
	online: 0,
	bounds: [
		{name: "province", text: "省域"},
		{name: "region", text: "市域"},
		{name: "city", text: "城域"},
		{name: "kernel", text: "核心区域"}
	],
	carRecords: IX.map(CarRecordItems, getDefaultItem),
	faceRecords: IX.map(FaceRecordItems, getDefaultItem)
};

var t_page = new IX.ITemplate({tpl: [
	'<div class="hdr">',
		'<span class="clock">',
			'<span class="pic-clock"></span>',
			'<span class="date">{date}</span>',
			'<span class="time">{time}</span>',
		'</span>',
		'<span class="info">',
			'总登录数：<b class="total">{total}</b>人，',
			'今日登录数：<b class="today">{today}</b>人，',
			'当前在线数：<b class="online">{online}</b>人',
		'</span>',
	'</div>	',
	'<div class="map"></div>',
	'<div class="map-mark">','<tpl id="bounds">',
		'<a data-href="$home.mapbound.click" data-key="{name}" class="{name}">',
			'<span class="bound"></span><span name="text">{text}</span>',
		'</a>',
	'</tpl>','</div>',
	'<div class="lbox">',
		'<h6>车辆数据总量</h6>',
		'<div class="box"></div>',
		'<div class="records">','<tpl id="carRecords">','<div class="rec{idx}">',
			'<span class="pic-item"></span>',
			'<span class="text">{text}：</span>',
			'<span class="value">{value}</span>',
			'<span class="unit">条</span>',
		'</div>','</tpl>','</div>',
		'<div class="catched">',
			'<div class="title">管控人员车辆</div>',
			'<div class="imgs"></div>',
		'</div>',
		'<div class="matched">',
			'<div class="title">车辆布控报警</div>',
			'<div class="imgs"></div>',
		'</div>',
	'</div>',
	'<div class="rbox">',
		'<h6>人脸数据总量</h6>',
		'<div class="box"></div>',
		'<div class="records">','<tpl id="faceRecords">','<div class="rec{idx}">',
			'<span class="pic-item"></span>',
			'<span class="text">{text}：</span>',
			'<span class="value">{value}</span>',
			'<span class="unit">条</span>',
		'</div>','</tpl>','</div>',
		'<div class="catched">',
			'<div class="title">人脸实时抓拍</div>',
			'<div class="imgs"></div>',
		'</div>',
		'<div class="matched">',
			'<div class="title">比中人脸</div>',
			'<div class="imgs"></div>',
		'</div>',
	'</div>',
	'<div class="pop"></div>',
'']});

var workTimer = new Timer(1000);
var hdrInfo = null, carInfo = null, faceInfo = null;
var mapInfo = null, alarmPanel = null;

IXW.Actions.configActions([["home.mapbound.click", function(params, el){
	if (mapInfo)
		mapInfo.toggleBound(params.key);

}],["home.img.click", function(params, el){ // refer imgSlider
	if (mapInfo)
		mapInfo.focus(params.key, $XD.dataAttr(el, "type"));
}],["pop.close.click",function(params,el){
	mapInfo.blur();
	alarmPanel.hide();
}]]);

function HdrInfo(el){
	var items = "total,today,online".split(",");
	var clockEl = $XH.first(el, "clock");
	var dtEl = IX.map(["date", "time"], function(name){
		return $XH.first(clockEl, name);
	});
	var infoEl = $XH.first(el, "info");
	var itemsEl = IX.map(items, function(name){
		return $XH.first(infoEl, name);
	});

	function refresh(userInfo){
		IX.iterate(items, function(name, idx){
			itemsEl[idx].innerHTML = userInfo[name];
		});	
	}

	workTimer.register(function(){
		IX.iterate(IX.Date.format(new Date()).split(" "), function(item, idx){
			if (item == dateStr[idx])
				return;
			dtEl[idx].innerHTML = item;
			dateStr[idx] = item;
		});
	});

	return {
		refresh: refresh
	};
}

function CarImgSlider(el, type){
	return new BaseImgSlider(el, "car-" + type, 3);
}
function FaceImgSlider(el, type){
	return new BaseImgSlider(el, "face-" + type, 5);
}

function ItemsInfo(el, items, imgClz){
	var digits = new Digits($XH.first(el, "box"), 11);
	var recordsEl = $XH.first(el, "records");
	var valueEls = IX.map(items, function(item, idx){
		return $XH.first($XH.first(recordsEl, "rec" + idx), "value");
	});

	var catched = new imgClz($XH.first($XH.first(el, "catched"), "imgs"), "catched");
	var matched = new imgClz($XH.first($XH.first(el, "matched"), "imgs"), "matched");

	function splitBillion(str){
		var after = str;
		var billion = "";
		var n = str.length - 8;
		if (n > 0){
			after = str.substring(n);
			billion = str.substring(0, n);
		}
		return '<i class="billion">'+billion+'</i>'+after;
	}

	function refresh(info){
		digits.refresh(info.total);

		IX.iterate(items, function(item, idx){
			valueEls[idx].innerHTML = splitBillion(""+info[item.key]);
		});
	}
	function refreshImgs(catchedItems, matchedItems){
		catched.refresh(catchedItems);
		matched.refresh(IX.map(matchedItems, function(item){
			return IX.inherit(item, {
				href: "$home.img.click"
			});
		}));
	}

	return {
		refresh: refresh,
		refreshImgs: refreshImgs
	};
}

var nsModule = IXW.ns("Homepage");
nsModule.init = function(pageCfg, pageParams, cbFn){
	var bodyEl = $X('body');
	var prevTS = 0;

	workTimer.clear();
	bodyEl.innerHTML = t_page.renderData("", DefaultPageData);
	hdrInfo = new HdrInfo($XH.first(bodyEl, "hdr"));
	carInfo = new ItemsInfo($XH.first(bodyEl, "lbox"), CarRecordItems, CarImgSlider);
	faceInfo = new ItemsInfo($XH.first(bodyEl, "rbox"), FaceRecordItems, FaceImgSlider);
	alarmPanel = new AlarmPanel($XH.first(bodyEl, "pop"));
	mapInfo = nsModule.showMapInfo($XH.first(bodyEl, "map"));

	mapInfo.onfocus(function(item){
		alarmPanel.show(item);
	});

	var infoCallers = [
		{target: hdrInfo, name: "getBasicData4User"},
		{target: faceInfo, name: "getBasicData4Face"},
		{target: carInfo, name: "getBasicData4Car"}
	];
	function refreshInfo(){
		IX.iterate(infoCallers, function(caller){
			nsGlobal.serviceCaller(caller.name, {}, function(data){
				caller.target.refresh(data);
			});
		});
	}

	var carCached = { captured: null, matched: null }, 
		faceCached = { captured: null, matched: null };
	var imgCallers = IX.map([
		{category: "car", type:"captured"}, //name:"getCarCaptured", 
		{category: "car", type:"matched"}, //name:"getCarMatched", 
		{category: "face", type:"captured"}, //name:"getFaceCaptured", 
		{category: "face", type:"matched"} //name:"getFaceMatched", 
	], function(item){
		var category = item.category, type = item.type;
		return {
			name: ["get", category, type].join("-").camelize(),
			cache : category=="car" ? carCached : faceCached,
			type: type,
			target : category=="car" ? carInfo : faceInfo
		};
	});

	function refreshImgs(){
		IX.iterate(imgCallers, function(caller){
			caller.cache[caller.type] = null;
		});
		IX.iterate(imgCallers, function(caller){
			nsGlobal.serviceCaller(caller.name, {}, function(data){
				var cache = caller.cache;
				cache[caller.type] = data;
				if (cache.captured && cache.matched)
					caller.target.refreshImgs(cache.captured, cache.matched);
				if (faceCached.matched && carCached.matched)
					mapInfo.refresh(carCached.matched, faceCached.matched);
			});
		});
	}
	//refreshImgs();
	workTimer.register(function(ticks){
		if (ticks - prevTS < 5000 ) return;
		prevTS = ticks;

		refreshInfo();
		refreshImgs();
	});
	workTimer.start();
};
})();
(function () {
var ixwPages = IXW.Pages;
var ixwSession = IXW.Session;
var nsGlobal = IXW.ns("Global");
var nsD3 = IXW.LibD3;
var ifLoaded = false;
function loadEffects(){
	if(ifLoaded) return;
	ifLoaded = true;
	// nsD3.loadDefs(nsGlobal.getSvgUrl("effects"));
}

var t_page = new IX.ITemplate({tpl: [
	'<div id = "lside"></div>',
	'<div id = "body"></div>',
	'<div id = "rside"></div>',
'']});

ixwSession.config({
	load: function(cbFn) {
		nsGlobal.commonCaller("session", {}, cbFn);
	},
	onstart: function(data) {// optional :
		//nsD3.restoreDefs();
	}
});

var PagesConfiurations = IX.map([
//{type?, name+, path?, bodyClz?, needAuth?},
{name: "homePage", isDefault : true},
{name: "sidePage"}
], function(item){
	var name = item.name;
	var arr = name.split("-");
	var moduleName = arr[0];
	var subNS = item.type || moduleName.capitalize();

	var _clz = [moduleName];
	if (item.bodyClz) _clz.push(item.bodyClz);

	return IX.inherit({
		initiator : [IXW_NS, subNS, "init"].join("."),
		path : arr.join("/"),

		needAuth : true
	}, item, {
		bodyClz : _clz.join(" ")
	});
});

ixwPages.configPages(PagesConfiurations, function(pageName, pageCfg){
	return !$XP(pageCfg, "needAuth", true) || ixwSession.isValid();
});

var appInitialized = false;
IXW.startup(function(){
	if (appInitialized)
		return;
	appInitialized = true;
	
	document.body.innerHTML = t_page.renderData("",{});
	ixwPages.listenOnClick(document.body);
	ixwSession.load(function(){
		ixwPages.start();
	});
	loadEffects();
});
})();